
pwm _adc_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a7c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006b90  08006b90  00007b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c60  08006c60  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  08006c60  08006c60  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c60  08006c60  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c60  08006c60  00007c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c64  08006c64  00007c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006c68  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08006cd8  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006cd8  000082d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a73  00000000  00000000  00008099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfa  00000000  00000000  00011b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00013708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000858  00000000  00000000  000141e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dfc  00000000  00000000  00014a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c675  00000000  00000000  0002c834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4a4  00000000  00000000  00038ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c434d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003848  00000000  00000000  000c4390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c7bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b74 	.word	0x08006b74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006b74 	.word	0x08006b74

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <lcd_init>:
#include <math.h>


/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

	HAL_Delay(30);
 8001150:	201e      	movs	r0, #30
 8001152:	f000 ffe7 	bl	8002124 <HAL_Delay>

	PIN_LOW(D4_PORT,D4_PIN);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800115c:	481c      	ldr	r0, [pc, #112]	@ (80011d0 <lcd_init+0x84>)
 800115e:	f001 fee7 	bl	8002f30 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001168:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <lcd_init+0x84>)
 800116a:	f001 fee1 	bl	8002f30 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001174:	4816      	ldr	r0, [pc, #88]	@ (80011d0 <lcd_init+0x84>)
 8001176:	f001 fedb 	bl	8002f30 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001180:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <lcd_init+0x84>)
 8001182:	f001 fed5 	bl	8002f30 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118c:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <lcd_init+0x84>)
 800118e:	f001 fecf 	bl	8002f30 <HAL_GPIO_WritePin>

	PIN_HIGH(EN_PORT,EN_PIN);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001198:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <lcd_init+0x84>)
 800119a:	f001 fec9 	bl	8002f30 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011a4:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <lcd_init+0x84>)
 80011a6:	f001 fec3 	bl	8002f30 <HAL_GPIO_WritePin>

	lcd_write(0,0x28);
 80011aa:	2128      	movs	r1, #40	@ 0x28
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f811 	bl	80011d4 <lcd_write>
	lcd_write(0,0x0c);
 80011b2:	210c      	movs	r1, #12
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f80d 	bl	80011d4 <lcd_write>
	lcd_write(0,0x06);
 80011ba:	2106      	movs	r1, #6
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f809 	bl	80011d4 <lcd_write>
	lcd_write(0,0x01);
 80011c2:	2101      	movs	r1, #1
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 f805 	bl	80011d4 <lcd_write>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40010c00 	.word	0x40010c00

080011d4 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 80011e4:	2002      	movs	r0, #2
 80011e6:	f000 ff9d 	bl	8002124 <HAL_Delay>
	if(type)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <lcd_write+0x2a>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f6:	485a      	ldr	r0, [pc, #360]	@ (8001360 <lcd_write+0x18c>)
 80011f8:	f001 fe9a 	bl	8002f30 <HAL_GPIO_WritePin>
 80011fc:	e005      	b.n	800120a <lcd_write+0x36>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001204:	4856      	ldr	r0, [pc, #344]	@ (8001360 <lcd_write+0x18c>)
 8001206:	f001 fe93 	bl	8002f30 <HAL_GPIO_WritePin>
	}

	//Send High Nibble
	if(data&0x80)
 800120a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800120e:	2b00      	cmp	r3, #0
 8001210:	da06      	bge.n	8001220 <lcd_write+0x4c>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001218:	4851      	ldr	r0, [pc, #324]	@ (8001360 <lcd_write+0x18c>)
 800121a:	f001 fe89 	bl	8002f30 <HAL_GPIO_WritePin>
 800121e:	e005      	b.n	800122c <lcd_write+0x58>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001226:	484e      	ldr	r0, [pc, #312]	@ (8001360 <lcd_write+0x18c>)
 8001228:	f001 fe82 	bl	8002f30 <HAL_GPIO_WritePin>
	}

	if(data&0x40)
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <lcd_write+0x70>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800123c:	4848      	ldr	r0, [pc, #288]	@ (8001360 <lcd_write+0x18c>)
 800123e:	f001 fe77 	bl	8002f30 <HAL_GPIO_WritePin>
 8001242:	e005      	b.n	8001250 <lcd_write+0x7c>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800124a:	4845      	ldr	r0, [pc, #276]	@ (8001360 <lcd_write+0x18c>)
 800124c:	f001 fe70 	bl	8002f30 <HAL_GPIO_WritePin>
	}

	if(data&0x20)
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <lcd_write+0x94>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001260:	483f      	ldr	r0, [pc, #252]	@ (8001360 <lcd_write+0x18c>)
 8001262:	f001 fe65 	bl	8002f30 <HAL_GPIO_WritePin>
 8001266:	e005      	b.n	8001274 <lcd_write+0xa0>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800126e:	483c      	ldr	r0, [pc, #240]	@ (8001360 <lcd_write+0x18c>)
 8001270:	f001 fe5e 	bl	8002f30 <HAL_GPIO_WritePin>
	}

	if(data&0x10)
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <lcd_write+0xb8>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001284:	4836      	ldr	r0, [pc, #216]	@ (8001360 <lcd_write+0x18c>)
 8001286:	f001 fe53 	bl	8002f30 <HAL_GPIO_WritePin>
 800128a:	e005      	b.n	8001298 <lcd_write+0xc4>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001292:	4833      	ldr	r0, [pc, #204]	@ (8001360 <lcd_write+0x18c>)
 8001294:	f001 fe4c 	bl	8002f30 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800129e:	4830      	ldr	r0, [pc, #192]	@ (8001360 <lcd_write+0x18c>)
 80012a0:	f001 fe46 	bl	8002f30 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012aa:	482d      	ldr	r0, [pc, #180]	@ (8001360 <lcd_write+0x18c>)
 80012ac:	f001 fe40 	bl	8002f30 <HAL_GPIO_WritePin>


	//Send Low Nibble
	if(data&0x08)
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <lcd_write+0xf4>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012c0:	4827      	ldr	r0, [pc, #156]	@ (8001360 <lcd_write+0x18c>)
 80012c2:	f001 fe35 	bl	8002f30 <HAL_GPIO_WritePin>
 80012c6:	e005      	b.n	80012d4 <lcd_write+0x100>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ce:	4824      	ldr	r0, [pc, #144]	@ (8001360 <lcd_write+0x18c>)
 80012d0:	f001 fe2e 	bl	8002f30 <HAL_GPIO_WritePin>
	}

	if(data&0x04)
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <lcd_write+0x118>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e4:	481e      	ldr	r0, [pc, #120]	@ (8001360 <lcd_write+0x18c>)
 80012e6:	f001 fe23 	bl	8002f30 <HAL_GPIO_WritePin>
 80012ea:	e005      	b.n	80012f8 <lcd_write+0x124>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012f2:	481b      	ldr	r0, [pc, #108]	@ (8001360 <lcd_write+0x18c>)
 80012f4:	f001 fe1c 	bl	8002f30 <HAL_GPIO_WritePin>
	}

	if(data&0x02)
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <lcd_write+0x13c>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001308:	4815      	ldr	r0, [pc, #84]	@ (8001360 <lcd_write+0x18c>)
 800130a:	f001 fe11 	bl	8002f30 <HAL_GPIO_WritePin>
 800130e:	e005      	b.n	800131c <lcd_write+0x148>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001316:	4812      	ldr	r0, [pc, #72]	@ (8001360 <lcd_write+0x18c>)
 8001318:	f001 fe0a 	bl	8002f30 <HAL_GPIO_WritePin>
	}

	if(data&0x01)
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <lcd_write+0x160>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <lcd_write+0x18c>)
 800132e:	f001 fdff 	bl	8002f30 <HAL_GPIO_WritePin>
 8001332:	e005      	b.n	8001340 <lcd_write+0x16c>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800133a:	4809      	ldr	r0, [pc, #36]	@ (8001360 <lcd_write+0x18c>)
 800133c:	f001 fdf8 	bl	8002f30 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001346:	4806      	ldr	r0, [pc, #24]	@ (8001360 <lcd_write+0x18c>)
 8001348:	f001 fdf2 	bl	8002f30 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001352:	4803      	ldr	r0, [pc, #12]	@ (8001360 <lcd_write+0x18c>)
 8001354:	f001 fdec 	bl	8002f30 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40010c00 	.word	0x40010c00

08001364 <lcd_puts_s>:

void lcd_puts_s(uint8_t x, uint8_t y, int8_t *string)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	603a      	str	r2, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	460b      	mov	r3, r1
 8001372:	71bb      	strb	r3, [r7, #6]

	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(y)
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d837      	bhi.n	80013ea <lcd_puts_s+0x86>
 800137a:	a201      	add	r2, pc, #4	@ (adr r2, 8001380 <lcd_puts_s+0x1c>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	08001391 	.word	0x08001391
 8001384:	080013a1 	.word	0x080013a1
 8001388:	080013b1 	.word	0x080013b1
 800138c:	080013c1 	.word	0x080013c1
	{
	        case 0: //Row 0
				lcd_write(0,0x80+0x00+x);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	3b80      	subs	r3, #128	@ 0x80
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff ff1b 	bl	80011d4 <lcd_write>
				break;
 800139e:	e018      	b.n	80013d2 <lcd_puts_s+0x6e>
			case 1: //Row 1
				lcd_write(0,0x80+0x40 +x);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	3b40      	subs	r3, #64	@ 0x40
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ff13 	bl	80011d4 <lcd_write>
				break;
 80013ae:	e010      	b.n	80013d2 <lcd_puts_s+0x6e>
			case 2: //Row 2
				lcd_write(0,0x80+0x14 +x);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	3b6c      	subs	r3, #108	@ 0x6c
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff ff0b 	bl	80011d4 <lcd_write>
				break;
 80013be:	e008      	b.n	80013d2 <lcd_puts_s+0x6e>
			case 3: //Row 3
				lcd_write(0,0x80+0x54 +x);
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	3b2c      	subs	r3, #44	@ 0x2c
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4619      	mov	r1, r3
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff ff03 	bl	80011d4 <lcd_write>
				break;
 80013ce:	bf00      	nop
 80013d0:	e00b      	b.n	80013ea <lcd_puts_s+0x86>
	}
	#endif


	while(*string)
 80013d2:	e00a      	b.n	80013ea <lcd_puts_s+0x86>
	{
		lcd_write(1,*string);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f993 3000 	ldrsb.w	r3, [r3]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fef8 	bl	80011d4 <lcd_write>
		string++;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	603b      	str	r3, [r7, #0]
	while(*string)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f993 3000 	ldrsb.w	r3, [r3]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ef      	bne.n	80013d4 <lcd_puts_s+0x70>
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop

08001400 <lcd_puts_d>:
void lcd_puts_d(uint8_t x, uint8_t y, uint8_t precision, float num)
{
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	460b      	mov	r3, r1
 800140e:	71bb      	strb	r3, [r7, #6]
 8001410:	4613      	mov	r3, r2
 8001412:	717b      	strb	r3, [r7, #5]

	 int  first  = num;
 8001414:	6838      	ldr	r0, [r7, #0]
 8001416:	f7ff fe73 	bl	8001100 <__aeabi_f2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
	 int  digits = ( log10(first)+1  >  1  ?  log10(first)+1  :  1  ) ;
 800141e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001420:	f7fe ffe8 	bl	80003f4 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f004 fa2c 	bl	8005888 <log10>
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b3f      	ldr	r3, [pc, #252]	@ (8001534 <lcd_puts_d+0x134>)
 8001436:	f7fe fe91 	bl	800015c <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <lcd_puts_d+0x134>)
 8001448:	f7ff face 	bl	80009e8 <__aeabi_dcmpgt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d015      	beq.n	800147e <lcd_puts_d+0x7e>
 8001452:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001454:	f7fe ffce 	bl	80003f4 <__aeabi_i2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f004 fa12 	bl	8005888 <log10>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b32      	ldr	r3, [pc, #200]	@ (8001534 <lcd_puts_d+0x134>)
 800146a:	f7fe fe77 	bl	800015c <__adddf3>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fad7 	bl	8000a28 <__aeabi_d2iz>
 800147a:	4603      	mov	r3, r0
 800147c:	e000      	b.n	8001480 <lcd_puts_d+0x80>
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
	 int  second = ( num - first ) * pow( 10 , precision ) ;
 8001482:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001484:	f7ff fc22 	bl	8000ccc <__aeabi_i2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4619      	mov	r1, r3
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f7ff fb67 	bl	8000b60 <__aeabi_fsub>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe ffbf 	bl	8000418 <__aeabi_f2d>
 800149a:	4604      	mov	r4, r0
 800149c:	460d      	mov	r5, r1
 800149e:	797b      	ldrb	r3, [r7, #5]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe ff97 	bl	80003d4 <__aeabi_ui2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	f04f 0000 	mov.w	r0, #0
 80014ae:	4922      	ldr	r1, [pc, #136]	@ (8001538 <lcd_puts_d+0x138>)
 80014b0:	f004 fa1c 	bl	80058ec <pow>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7ff f804 	bl	80004c8 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff faae 	bl	8000a28 <__aeabi_d2iz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	61fb      	str	r3, [r7, #28]
     char buffer[16];

	 sprintf(buffer, "%u",  first);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d6:	4919      	ldr	r1, [pc, #100]	@ (800153c <lcd_puts_d+0x13c>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fd25 	bl	8004f28 <siprintf>
	 lcd_puts_s(x,y,(int8_t*) buffer);
 80014de:	f107 020c 	add.w	r2, r7, #12
 80014e2:	79b9      	ldrb	r1, [r7, #6]
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff3c 	bl	8001364 <lcd_puts_s>

	 if(precision)
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01b      	beq.n	800152a <lcd_puts_d+0x12a>
	 {
		     lcd_puts_s( x+1 , y ,(int8_t*) ".");
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	79b9      	ldrb	r1, [r7, #6]
 80014fa:	4a11      	ldr	r2, [pc, #68]	@ (8001540 <lcd_puts_d+0x140>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <lcd_puts_s>

			 sprintf(buffer, "%u",  second);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	490c      	ldr	r1, [pc, #48]	@ (800153c <lcd_puts_d+0x13c>)
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fd0c 	bl	8004f28 <siprintf>
			 lcd_puts_s(x+1+digits,y,(int8_t*)buffer);
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	4413      	add	r3, r2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3301      	adds	r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	79b9      	ldrb	r1, [r7, #6]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff1d 	bl	8001364 <lcd_puts_s>
	 }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	@ 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bdb0      	pop	{r4, r5, r7, pc}
 8001532:	bf00      	nop
 8001534:	3ff00000 	.word	0x3ff00000
 8001538:	40240000 	.word	0x40240000
 800153c:	08006b90 	.word	0x08006b90
 8001540:	08006b94 	.word	0x08006b94

08001544 <lcd_clear>:
void lcd_clear(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8001548:	2101      	movs	r1, #1
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff fe42 	bl	80011d4 <lcd_write>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a5a      	ldr	r2, [pc, #360]	@ (80016cc <HAL_TIM_IC_CaptureCallback+0x178>)
 8001562:	4293      	cmp	r3, r2
 8001564:	f040 80ae 	bne.w	80016c4 <HAL_TIM_IC_CaptureCallback+0x170>
        if (Is_First_Captured == 0) { // First edge: rising edge
 8001568:	4b59      	ldr	r3, [pc, #356]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d11a      	bne.n	80015a6 <HAL_TIM_IC_CaptureCallback+0x52>
            rising_edge_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f003 f858 	bl	8004628 <HAL_TIM_ReadCapturedValue>
 8001578:	4603      	mov	r3, r0
 800157a:	4a56      	ldr	r2, [pc, #344]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x180>)
 800157c:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;
 800157e:	4b54      	ldr	r3, [pc, #336]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6a1a      	ldr	r2, [r3, #32]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 020a 	bic.w	r2, r2, #10
 8001592:	621a      	str	r2, [r3, #32]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0202 	orr.w	r2, r2, #2
 80015a2:	621a      	str	r2, [r3, #32]
            } else {
                duty_cycle = 0; // Handle case where period is zero
            }
        }
    }
}
 80015a4:	e08e      	b.n	80016c4 <HAL_TIM_IC_CaptureCallback+0x170>
        } else if (Is_First_Captured == 1) { // Second edge: falling edge
 80015a6:	4b4a      	ldr	r3, [pc, #296]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d13a      	bne.n	8001624 <HAL_TIM_IC_CaptureCallback+0xd0>
            falling_edge_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80015ae:	2100      	movs	r1, #0
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f003 f839 	bl	8004628 <HAL_TIM_ReadCapturedValue>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a47      	ldr	r2, [pc, #284]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x184>)
 80015ba:	6013      	str	r3, [r2, #0]
            if (falling_edge_time >= rising_edge_1) {
 80015bc:	4b46      	ldr	r3, [pc, #280]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x184>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b44      	ldr	r3, [pc, #272]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x180>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d30b      	bcc.n	80015e0 <HAL_TIM_IC_CaptureCallback+0x8c>
                high_time = falling_edge_time - rising_edge_1;
 80015c8:	4b43      	ldr	r3, [pc, #268]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x184>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b41      	ldr	r3, [pc, #260]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x180>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fb76 	bl	8000cc4 <__aeabi_ui2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a40      	ldr	r2, [pc, #256]	@ (80016dc <HAL_TIM_IC_CaptureCallback+0x188>)
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e00f      	b.n	8001600 <HAL_TIM_IC_CaptureCallback+0xac>
                high_time = (htim->Instance->ARR - rising_edge_1) + falling_edge_time + 1;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e6:	4b3b      	ldr	r3, [pc, #236]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x180>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	4b3a      	ldr	r3, [pc, #232]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x184>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	3301      	adds	r3, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fb65 	bl	8000cc4 <__aeabi_ui2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a37      	ldr	r2, [pc, #220]	@ (80016dc <HAL_TIM_IC_CaptureCallback+0x188>)
 80015fe:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 020a 	bic.w	r2, r2, #10
 800160e:	621a      	str	r2, [r3, #32]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a12      	ldr	r2, [r2, #32]
 800161a:	621a      	str	r2, [r3, #32]
            Is_First_Captured = 2; // Ready for period measurement
 800161c:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800161e:	2202      	movs	r2, #2
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	e04f      	b.n	80016c4 <HAL_TIM_IC_CaptureCallback+0x170>
        } else if (Is_First_Captured == 2) { // Third edge: next rising edge
 8001624:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d14b      	bne.n	80016c4 <HAL_TIM_IC_CaptureCallback+0x170>
            rising_edge_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f002 fffa 	bl	8004628 <HAL_TIM_ReadCapturedValue>
 8001634:	4603      	mov	r3, r0
 8001636:	4a2a      	ldr	r2, [pc, #168]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001638:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 0; // Reset for the next cycle
 800163a:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
            if (rising_edge_2 >= falling_edge_time) {
 8001640:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d30b      	bcc.n	8001664 <HAL_TIM_IC_CaptureCallback+0x110>
                period = rising_edge_2 - rising_edge_1; // Normal case
 800164c:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fb34 	bl	8000cc4 <__aeabi_ui2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00f      	b.n	8001684 <HAL_TIM_IC_CaptureCallback+0x130>
                period = (htim->Instance->ARR - rising_edge_1) + rising_edge_2 + 1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x180>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4413      	add	r3, r2
 8001676:	3301      	adds	r3, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb23 	bl	8000cc4 <__aeabi_ui2f>
 800167e:	4603      	mov	r3, r0
 8001680:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001682:	6013      	str	r3, [r2, #0]
            if (period != 0) {
 8001684:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f04f 0100 	mov.w	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fd05 	bl	800109c <__aeabi_fcmpeq>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d111      	bne.n	80016bc <HAL_TIM_IC_CaptureCallback+0x168>
                duty_cycle = ((float)high_time / period) * 100.0f; // Convert to percentage
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_TIM_IC_CaptureCallback+0x188>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a11      	ldr	r2, [pc, #68]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x190>)
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fc1a 	bl	8000edc <__aeabi_fdiv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	490f      	ldr	r1, [pc, #60]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x194>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fb61 	bl	8000d74 <__aeabi_fmul>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <HAL_TIM_IC_CaptureCallback+0x198>)
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	e003      	b.n	80016c4 <HAL_TIM_IC_CaptureCallback+0x170>
                duty_cycle = 0; // Handle case where period is zero
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_TIM_IC_CaptureCallback+0x198>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40000400 	.word	0x40000400
 80016d0:	20000158 	.word	0x20000158
 80016d4:	2000015c 	.word	0x2000015c
 80016d8:	20000164 	.word	0x20000164
 80016dc:	20000168 	.word	0x20000168
 80016e0:	20000160 	.word	0x20000160
 80016e4:	2000016c 	.word	0x2000016c
 80016e8:	42c80000 	.word	0x42c80000
 80016ec:	20000170 	.word	0x20000170

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f4:	f000 fcb4 	bl	8002060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f8:	f000 f926 	bl	8001948 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fc:	f000 faa6 	bl	8001c4c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001700:	f000 f972 	bl	80019e8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001704:	f000 f9ae 	bl	8001a64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001708:	f000 fa22 	bl	8001b50 <MX_TIM3_Init>
  lcd_init();
 800170c:	f7ff fd1e 	bl	800114c <lcd_init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start(&htim2);
 8001710:	487d      	ldr	r0, [pc, #500]	@ (8001908 <main+0x218>)
 8001712:	f002 f9dd 	bl	8003ad0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);   // Start Timer 2 to generate a PWM signal on Channel 3
 8001716:	2108      	movs	r1, #8
 8001718:	487b      	ldr	r0, [pc, #492]	@ (8001908 <main+0x218>)
 800171a:	f002 fa75 	bl	8003c08 <HAL_TIM_PWM_Start>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // Start Timer 3 in Input Capture mode on Channel 1 with interrupts enabled
 800171e:	2100      	movs	r1, #0
 8001720:	487a      	ldr	r0, [pc, #488]	@ (800190c <main+0x21c>)
 8001722:	f002 fb65 	bl	8003df0 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // ADC Channel 1 Configuration
	        sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8001726:	4b7a      	ldr	r3, [pc, #488]	@ (8001910 <main+0x220>)
 8001728:	2201      	movs	r2, #1
 800172a:	605a      	str	r2, [r3, #4]
	        sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800172c:	4b78      	ldr	r3, [pc, #480]	@ (8001910 <main+0x220>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
	        sConfigPrivate.Channel = ADC_CHANNEL_1; // Using ADC_CHANNEL_1
 8001732:	4b77      	ldr	r3, [pc, #476]	@ (8001910 <main+0x220>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
	        HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate); // Prepare the ADC before starting conversion
 8001738:	4975      	ldr	r1, [pc, #468]	@ (8001910 <main+0x220>)
 800173a:	4876      	ldr	r0, [pc, #472]	@ (8001914 <main+0x224>)
 800173c:	f000 ffda 	bl	80026f4 <HAL_ADC_ConfigChannel>
	        HAL_ADC_Start(&hadc1); // Start the ADC conversion process
 8001740:	4874      	ldr	r0, [pc, #464]	@ (8001914 <main+0x224>)
 8001742:	f000 fdeb 	bl	800231c <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, 1000); // Wait for ADC conversion
 8001746:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800174a:	4872      	ldr	r0, [pc, #456]	@ (8001914 <main+0x224>)
 800174c:	f000 fec0 	bl	80024d0 <HAL_ADC_PollForConversion>
	        PotAfterConversion = HAL_ADC_GetValue(&hadc1); // Get ADC value
 8001750:	4870      	ldr	r0, [pc, #448]	@ (8001914 <main+0x224>)
 8001752:	f000 ffc3 	bl	80026dc <HAL_ADC_GetValue>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b6f      	ldr	r3, [pc, #444]	@ (8001918 <main+0x228>)
 800175c:	801a      	strh	r2, [r3, #0]
	        HAL_ADC_Stop(&hadc1); // Stop the ADC peripheral
 800175e:	486d      	ldr	r0, [pc, #436]	@ (8001914 <main+0x224>)
 8001760:	f000 fe8a 	bl	8002478 <HAL_ADC_Stop>

	        // Calculate PWM Duty Cycle
	        dutycycle = (PotAfterConversion / 4095.0) * 8000; // Adjust the duty cycle
 8001764:	4b6c      	ldr	r3, [pc, #432]	@ (8001918 <main+0x228>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fe43 	bl	80003f4 <__aeabi_i2d>
 800176e:	a364      	add	r3, pc, #400	@ (adr r3, 8001900 <main+0x210>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ffd2 	bl	800071c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	4b65      	ldr	r3, [pc, #404]	@ (800191c <main+0x22c>)
 8001786:	f7fe fe9f 	bl	80004c8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f971 	bl	8000a78 <__aeabi_d2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b61      	ldr	r3, [pc, #388]	@ (8001920 <main+0x230>)
 800179c:	801a      	strh	r2, [r3, #0]
	        percentage = dutycycle * 100 / 8000; // Calculate percentage
 800179e:	4b60      	ldr	r3, [pc, #384]	@ (8001920 <main+0x230>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4a60      	ldr	r2, [pc, #384]	@ (8001924 <main+0x234>)
 80017a4:	fb82 1203 	smull	r1, r2, r2, r3
 80017a8:	1152      	asrs	r2, r2, #5
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001928 <main+0x238>)
 80017b2:	801a      	strh	r2, [r3, #0]

	        // Generate PWM signal
	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, dutycycle);
 80017b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001920 <main+0x230>)
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	4b53      	ldr	r3, [pc, #332]	@ (8001908 <main+0x218>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	63da      	str	r2, [r3, #60]	@ 0x3c

	        // ADC Channel 6 Configuration
	        sConfigPrivate.Channel = ADC_CHANNEL_6;
 80017be:	4b54      	ldr	r3, [pc, #336]	@ (8001910 <main+0x220>)
 80017c0:	2206      	movs	r2, #6
 80017c2:	601a      	str	r2, [r3, #0]
	        HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80017c4:	4952      	ldr	r1, [pc, #328]	@ (8001910 <main+0x220>)
 80017c6:	4853      	ldr	r0, [pc, #332]	@ (8001914 <main+0x224>)
 80017c8:	f000 ff94 	bl	80026f4 <HAL_ADC_ConfigChannel>
	        HAL_ADC_Start(&hadc1);
 80017cc:	4851      	ldr	r0, [pc, #324]	@ (8001914 <main+0x224>)
 80017ce:	f000 fda5 	bl	800231c <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, 1000); // Convert the PWM signal
 80017d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017d6:	484f      	ldr	r0, [pc, #316]	@ (8001914 <main+0x224>)
 80017d8:	f000 fe7a 	bl	80024d0 <HAL_ADC_PollForConversion>
	        PWMconversion = HAL_ADC_GetValue(&hadc1); // Store the converted value
 80017dc:	484d      	ldr	r0, [pc, #308]	@ (8001914 <main+0x224>)
 80017de:	f000 ff7d 	bl	80026dc <HAL_ADC_GetValue>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b51      	ldr	r3, [pc, #324]	@ (800192c <main+0x23c>)
 80017e8:	801a      	strh	r2, [r3, #0]
	        HAL_ADC_Stop(&hadc1);
 80017ea:	484a      	ldr	r0, [pc, #296]	@ (8001914 <main+0x224>)
 80017ec:	f000 fe44 	bl	8002478 <HAL_ADC_Stop>

	        // Calculate Voltage
	        voltage = PWMconversion / 4095.0 * 5; // Calculate voltage
 80017f0:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <main+0x23c>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fdfd 	bl	80003f4 <__aeabi_i2d>
 80017fa:	a341      	add	r3, pc, #260	@ (adr r3, 8001900 <main+0x210>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe ff8c 	bl	800071c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <main+0x240>)
 8001812:	f7fe fe59 	bl	80004c8 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f94b 	bl	8000ab8 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a43      	ldr	r2, [pc, #268]	@ (8001934 <main+0x244>)
 8001826:	6013      	str	r3, [r2, #0]

	        // LCD Display
	        lcd_puts_s(0, 0, (int8_t*)"Duty Cycle : ");
 8001828:	4a43      	ldr	r2, [pc, #268]	@ (8001938 <main+0x248>)
 800182a:	2100      	movs	r1, #0
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fd99 	bl	8001364 <lcd_puts_s>
	        lcd_puts_d(13, 0, 0, percentage);
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <main+0x238>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fa44 	bl	8000cc4 <__aeabi_ui2f>
 800183c:	4603      	mov	r3, r0
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	200d      	movs	r0, #13
 8001844:	f7ff fddc 	bl	8001400 <lcd_puts_d>
	        lcd_puts_s(16, 0, (int8_t*)"%");
 8001848:	4a3c      	ldr	r2, [pc, #240]	@ (800193c <main+0x24c>)
 800184a:	2100      	movs	r1, #0
 800184c:	2010      	movs	r0, #16
 800184e:	f7ff fd89 	bl	8001364 <lcd_puts_s>
	        lcd_puts_s(0, 1, (int8_t*)"Voltage    : ");
 8001852:	4a3b      	ldr	r2, [pc, #236]	@ (8001940 <main+0x250>)
 8001854:	2101      	movs	r1, #1
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fd84 	bl	8001364 <lcd_puts_s>
	        lcd_puts_d(13, 1, 2, voltage);
 800185c:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <main+0x244>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2202      	movs	r2, #2
 8001862:	2101      	movs	r1, #1
 8001864:	200d      	movs	r0, #13
 8001866:	f7ff fdcb 	bl	8001400 <lcd_puts_d>

	        // LED for Duty Cycle Indication
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, percentage >= 20 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800186a:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <main+0x238>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	2b13      	cmp	r3, #19
 8001870:	bf8c      	ite	hi
 8001872:	2301      	movhi	r3, #1
 8001874:	2300      	movls	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800187e:	4831      	ldr	r0, [pc, #196]	@ (8001944 <main+0x254>)
 8001880:	f001 fb56 	bl	8002f30 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, percentage >= 40 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001884:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <main+0x238>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	2b27      	cmp	r3, #39	@ 0x27
 800188a:	bf8c      	ite	hi
 800188c:	2301      	movhi	r3, #1
 800188e:	2300      	movls	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001898:	482a      	ldr	r0, [pc, #168]	@ (8001944 <main+0x254>)
 800189a:	f001 fb49 	bl	8002f30 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, percentage >= 60 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <main+0x238>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80018a4:	bf8c      	ite	hi
 80018a6:	2301      	movhi	r3, #1
 80018a8:	2300      	movls	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018b2:	4824      	ldr	r0, [pc, #144]	@ (8001944 <main+0x254>)
 80018b4:	f001 fb3c 	bl	8002f30 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, percentage >= 80 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <main+0x238>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	2b4f      	cmp	r3, #79	@ 0x4f
 80018be:	bf8c      	ite	hi
 80018c0:	2301      	movhi	r3, #1
 80018c2:	2300      	movls	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018cc:	481d      	ldr	r0, [pc, #116]	@ (8001944 <main+0x254>)
 80018ce:	f001 fb2f 	bl	8002f30 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, percentage >= 100 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <main+0x238>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b63      	cmp	r3, #99	@ 0x63
 80018d8:	bf8c      	ite	hi
 80018da:	2301      	movhi	r3, #1
 80018dc:	2300      	movls	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018e6:	4817      	ldr	r0, [pc, #92]	@ (8001944 <main+0x254>)
 80018e8:	f001 fb22 	bl	8002f30 <HAL_GPIO_WritePin>

	        HAL_Delay(300); // Delay for visualizing data on LCD
 80018ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018f0:	f000 fc18 	bl	8002124 <HAL_Delay>
	        lcd_clear(); // Clear the screen
 80018f4:	f7ff fe26 	bl	8001544 <lcd_clear>
	        sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 80018f8:	bf00      	nop
 80018fa:	e714      	b.n	8001726 <main+0x36>
 80018fc:	f3af 8000 	nop.w
 8001900:	00000000 	.word	0x00000000
 8001904:	40affe00 	.word	0x40affe00
 8001908:	200000bc 	.word	0x200000bc
 800190c:	20000104 	.word	0x20000104
 8001910:	20000174 	.word	0x20000174
 8001914:	2000008c 	.word	0x2000008c
 8001918:	20000150 	.word	0x20000150
 800191c:	40bf4000 	.word	0x40bf4000
 8001920:	2000014e 	.word	0x2000014e
 8001924:	66666667 	.word	0x66666667
 8001928:	2000014c 	.word	0x2000014c
 800192c:	20000152 	.word	0x20000152
 8001930:	40140000 	.word	0x40140000
 8001934:	20000154 	.word	0x20000154
 8001938:	08006b98 	.word	0x08006b98
 800193c:	08006ba8 	.word	0x08006ba8
 8001940:	08006bac 	.word	0x08006bac
 8001944:	40010800 	.word	0x40010800

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	@ 0x50
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001952:	2228      	movs	r2, #40	@ 0x28
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fb06 	bl	8004f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197c:	2301      	movs	r3, #1
 800197e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001980:	2310      	movs	r3, #16
 8001982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001988:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800198c:	4618      	mov	r0, r3
 800198e:	f001 fae7 	bl	8002f60 <HAL_RCC_OscConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001998:	f000 f9ba 	bl	8001d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199c:	230f      	movs	r3, #15
 800199e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fd54 	bl	8003464 <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80019c2:	f000 f9a5 	bl	8001d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019c6:	2302      	movs	r3, #2
 80019c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 fec1 	bl	8003758 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019dc:	f000 f998 	bl	8001d10 <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	3750      	adds	r7, #80	@ 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019f8:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <MX_ADC1_Init+0x74>)
 80019fa:	4a19      	ldr	r2, [pc, #100]	@ (8001a60 <MX_ADC1_Init+0x78>)
 80019fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <MX_ADC1_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <MX_ADC1_Init+0x74>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <MX_ADC1_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <MX_ADC1_Init+0x74>)
 8001a12:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a18:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <MX_ADC1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <MX_ADC1_Init+0x74>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a24:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <MX_ADC1_Init+0x74>)
 8001a26:	f000 fba1 	bl	800216c <HAL_ADC_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a30:	f000 f96e 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_ADC1_Init+0x74>)
 8001a46:	f000 fe55 	bl	80026f4 <HAL_ADC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a50:	f000 f95e 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000008c 	.word	0x2000008c
 8001a60:	40012400 	.word	0x40012400

08001a64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	@ 0x38
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a94:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001a96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8001aa8:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001aaa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001abc:	4823      	ldr	r0, [pc, #140]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001abe:	f001 ffb7 	bl	8003a30 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ac8:	f000 f922 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481c      	ldr	r0, [pc, #112]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001ada:	f002 fcdd 	bl	8004498 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ae4:	f000 f914 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ae8:	4818      	ldr	r0, [pc, #96]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001aea:	f002 f835 	bl	8003b58 <HAL_TIM_PWM_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001af4:	f000 f90c 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	4619      	mov	r1, r3
 8001b06:	4811      	ldr	r0, [pc, #68]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001b08:	f003 f9a4 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b12:	f000 f8fd 	bl	8001d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b16:	2360      	movs	r3, #96	@ 0x60
 8001b18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2208      	movs	r2, #8
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001b2e:	f002 fbf1 	bl	8004314 <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001b38:	f000 f8ea 	bl	8001d10 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */



  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b3c:	4803      	ldr	r0, [pc, #12]	@ (8001b4c <MX_TIM2_Init+0xe8>)
 8001b3e:	f000 f9c7 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 8001b42:	bf00      	nop
 8001b44:	3738      	adds	r7, #56	@ 0x38
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000bc 	.word	0x200000bc

08001b50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b56:	f107 0318 	add.w	r3, r7, #24
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b6e:	463b      	mov	r3, r7
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b7a:	4b32      	ldr	r3, [pc, #200]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001b7c:	4a32      	ldr	r2, [pc, #200]	@ (8001c48 <MX_TIM3_Init+0xf8>)
 8001b7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b80:	4b30      	ldr	r3, [pc, #192]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001b8e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ba0:	4828      	ldr	r0, [pc, #160]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001ba2:	f001 ff45 	bl	8003a30 <HAL_TIM_Base_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001bac:	f000 f8b0 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bb6:	f107 0318 	add.w	r3, r7, #24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4821      	ldr	r0, [pc, #132]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001bbe:	f002 fc6b 	bl	8004498 <HAL_TIM_ConfigClockSource>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bc8:	f000 f8a2 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001bcc:	481d      	ldr	r0, [pc, #116]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001bce:	f002 f8b7 	bl	8003d40 <HAL_TIM_IC_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bd8:	f000 f89a 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4619      	mov	r1, r3
 8001bea:	4816      	ldr	r0, [pc, #88]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001bec:	f003 f932 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001bf6:	f000 f88b 	bl	8001d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001c12:	f002 fae3 	bl	80041dc <HAL_TIM_IC_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001c1c:	f000 f878 	bl	8001d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c20:	2302      	movs	r3, #2
 8001c22:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	2204      	movs	r2, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <MX_TIM3_Init+0xf4>)
 8001c2c:	f002 fad6 	bl	80041dc <HAL_TIM_IC_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001c36:	f000 f86b 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	@ 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000104 	.word	0x20000104
 8001c48:	40000400 	.word	0x40000400

08001c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c60:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a27      	ldr	r2, [pc, #156]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c66:	f043 0320 	orr.w	r3, r3, #32
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a21      	ldr	r2, [pc, #132]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c90:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <MX_GPIO_Init+0xb8>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 8001cae:	4816      	ldr	r0, [pc, #88]	@ (8001d08 <MX_GPIO_Init+0xbc>)
 8001cb0:	f001 f93e 	bl	8002f30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 8001cba:	4814      	ldr	r0, [pc, #80]	@ (8001d0c <MX_GPIO_Init+0xc0>)
 8001cbc:	f001 f938 	bl	8002f30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001cc0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001cc4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480b      	ldr	r0, [pc, #44]	@ (8001d08 <MX_GPIO_Init+0xbc>)
 8001cda:	f000 ffad 	bl	8002c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cde:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001ce2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <MX_GPIO_Init+0xc0>)
 8001cf8:	f000 ff9e 	bl	8002c38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	40010800 	.word	0x40010800

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <Error_Handler+0x8>

08001d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_MspInit+0x5c>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <HAL_MspInit+0x5c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_MspInit+0x5c>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <HAL_MspInit+0x5c>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d78 <HAL_MspInit+0x5c>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <HAL_MspInit+0x5c>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_MspInit+0x60>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <HAL_MspInit+0x60>)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <HAL_ADC_MspInit+0x6c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d121      	bne.n	8001de4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <HAL_ADC_MspInit+0x70>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <HAL_ADC_MspInit+0x70>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <HAL_ADC_MspInit+0x70>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <HAL_ADC_MspInit+0x70>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <HAL_ADC_MspInit+0x70>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_ADC_MspInit+0x70>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001dd0:	2342      	movs	r3, #66	@ 0x42
 8001dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <HAL_ADC_MspInit+0x74>)
 8001de0:	f000 ff2a 	bl	8002c38 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40012400 	.word	0x40012400
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010800 	.word	0x40010800

08001df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e16:	d10c      	bne.n	8001e32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e18:	4b29      	ldr	r3, [pc, #164]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	61d3      	str	r3, [r2, #28]
 8001e24:	4b26      	ldr	r3, [pc, #152]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e30:	e042      	b.n	8001eb8 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xcc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d13d      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	61d3      	str	r3, [r2, #28]
 8001e48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	6193      	str	r3, [r2, #24]
 8001e60:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e6c:	2330      	movs	r3, #48	@ 0x30
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4812      	ldr	r0, [pc, #72]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xd0>)
 8001e80:	f000 feda 	bl	8002c38 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_TIM_Base_MspInit+0xd4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <HAL_TIM_Base_MspInit+0xd4>)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	201d      	movs	r0, #29
 8001eae:	f000 fe8c 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001eb2:	201d      	movs	r0, #29
 8001eb4:	f000 fea5 	bl	8002c02 <HAL_NVIC_EnableIRQ>
}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	@ 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eee:	d117      	bne.n	8001f20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_TIM_MspPostInit+0x58>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f28 <HAL_TIM_MspPostInit+0x58>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_TIM_MspPostInit+0x58>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4804      	ldr	r0, [pc, #16]	@ (8001f2c <HAL_TIM_MspPostInit+0x5c>)
 8001f1c:	f000 fe8c 	bl	8002c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010800 	.word	0x40010800

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <NMI_Handler+0x4>

08001f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <MemManage_Handler+0x4>

08001f48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f8b4 	bl	80020ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <TIM3_IRQHandler+0x10>)
 8001f8e:	f002 f835 	bl	8003ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000104 	.word	0x20000104

08001f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa4:	4a14      	ldr	r2, [pc, #80]	@ (8001ff8 <_sbrk+0x5c>)
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <_sbrk+0x60>)
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <_sbrk+0x64>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <_sbrk+0x68>)
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d207      	bcs.n	8001fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fcc:	f002 ffd4 	bl	8004f78 <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	e009      	b.n	8001ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <_sbrk+0x64>)
 8001fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20002800 	.word	0x20002800
 8001ffc:	00000400 	.word	0x00000400
 8002000:	20000180 	.word	0x20000180
 8002004:	200002d0 	.word	0x200002d0

08002008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002014:	f7ff fff8 	bl	8002008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002018:	480b      	ldr	r0, [pc, #44]	@ (8002048 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800201a:	490c      	ldr	r1, [pc, #48]	@ (800204c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800201c:	4a0c      	ldr	r2, [pc, #48]	@ (8002050 <LoopFillZerobss+0x16>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a09      	ldr	r2, [pc, #36]	@ (8002054 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002030:	4c09      	ldr	r4, [pc, #36]	@ (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203e:	f002 ffa1 	bl	8004f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002042:	f7ff fb55 	bl	80016f0 <main>
  bx lr
 8002046:	4770      	bx	lr
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002050:	08006c68 	.word	0x08006c68
  ldr r2, =_sbss
 8002054:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002058:	200002d0 	.word	0x200002d0

0800205c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC1_2_IRQHandler>
	...

08002060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002064:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <HAL_Init+0x28>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a07      	ldr	r2, [pc, #28]	@ (8002088 <HAL_Init+0x28>)
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002070:	2003      	movs	r0, #3
 8002072:	f000 fd9f 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002076:	200f      	movs	r0, #15
 8002078:	f000 f808 	bl	800208c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800207c:	f7ff fe4e 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40022000 	.word	0x40022000

0800208c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002094:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <HAL_InitTick+0x54>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_InitTick+0x58>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fdb7 	bl	8002c1e <HAL_SYSTICK_Config>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00e      	b.n	80020d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b0f      	cmp	r3, #15
 80020be:	d80a      	bhi.n	80020d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c0:	2200      	movs	r2, #0
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f000 fd7f 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020cc:	4a06      	ldr	r2, [pc, #24]	@ (80020e8 <HAL_InitTick+0x5c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000008 	.word	0x20000008
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <HAL_IncTick+0x1c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_IncTick+0x20>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	4a03      	ldr	r2, [pc, #12]	@ (800210c <HAL_IncTick+0x20>)
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	20000008 	.word	0x20000008
 800210c:	20000184 	.word	0x20000184

08002110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b02      	ldr	r3, [pc, #8]	@ (8002120 <HAL_GetTick+0x10>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	20000184 	.word	0x20000184

08002124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff fff0 	bl	8002110 <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d005      	beq.n	800214a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_Delay+0x44>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214a:	bf00      	nop
 800214c:	f7ff ffe0 	bl	8002110 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d8f7      	bhi.n	800214c <HAL_Delay+0x28>
  {
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000008 	.word	0x20000008

0800216c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0be      	b.n	800230c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fde8 	bl	8001d80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fbf1 	bl	8002998 <ADC_ConversionStop_Disable>
 80021b6:	4603      	mov	r3, r0
 80021b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 8099 	bne.w	80022fa <HAL_ADC_Init+0x18e>
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 8095 	bne.w	80022fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021d8:	f023 0302 	bic.w	r3, r3, #2
 80021dc:	f043 0202 	orr.w	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7b1b      	ldrb	r3, [r3, #12]
 80021f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002204:	d003      	beq.n	800220e <HAL_ADC_Init+0xa2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_ADC_Init+0xa8>
 800220e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002212:	e000      	b.n	8002216 <HAL_ADC_Init+0xaa>
 8002214:	2300      	movs	r3, #0
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7d1b      	ldrb	r3, [r3, #20]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d119      	bne.n	8002258 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7b1b      	ldrb	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	3b01      	subs	r3, #1
 8002232:	035a      	lsls	r2, r3, #13
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	e00b      	b.n	8002258 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	4b28      	ldr	r3, [pc, #160]	@ (8002314 <HAL_ADC_Init+0x1a8>)
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	430b      	orrs	r3, r1
 800227e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002288:	d003      	beq.n	8002292 <HAL_ADC_Init+0x126>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d104      	bne.n	800229c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	3b01      	subs	r3, #1
 8002298:	051b      	lsls	r3, r3, #20
 800229a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_ADC_Init+0x1ac>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d10b      	bne.n	80022d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022d6:	e018      	b.n	800230a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	f023 0312 	bic.w	r3, r3, #18
 80022e0:	f043 0210 	orr.w	r2, r3, #16
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022f8:	e007      	b.n	800230a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800230a:	7dfb      	ldrb	r3, [r7, #23]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	ffe1f7fd 	.word	0xffe1f7fd
 8002318:	ff1f0efe 	.word	0xff1f0efe

0800231c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADC_Start+0x1a>
 8002332:	2302      	movs	r3, #2
 8002334:	e098      	b.n	8002468 <HAL_ADC_Start+0x14c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fad0 	bl	80028e4 <ADC_Enable>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 8087 	bne.w	800245e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a41      	ldr	r2, [pc, #260]	@ (8002470 <HAL_ADC_Start+0x154>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d105      	bne.n	800237a <HAL_ADC_Start+0x5e>
 800236e:	4b41      	ldr	r3, [pc, #260]	@ (8002474 <HAL_ADC_Start+0x158>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d115      	bne.n	80023a6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d026      	beq.n	80023e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800239c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023a4:	e01d      	b.n	80023e2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002474 <HAL_ADC_Start+0x158>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_ADC_Start+0xaa>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002470 <HAL_ADC_Start+0x154>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10d      	bne.n	80023e2 <HAL_ADC_Start+0xc6>
 80023c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_ADC_Start+0x158>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	f023 0206 	bic.w	r2, r3, #6
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023fa:	e002      	b.n	8002402 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f06f 0202 	mvn.w	r2, #2
 8002412:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800241e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002422:	d113      	bne.n	800244c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002428:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <HAL_ADC_Start+0x154>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d105      	bne.n	800243a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_ADC_Start+0x158>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	e00c      	b.n	8002466 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	e003      	b.n	8002466 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40012800 	.word	0x40012800
 8002474:	40012400 	.word	0x40012400

08002478 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Stop+0x1a>
 800248e:	2302      	movs	r3, #2
 8002490:	e01a      	b.n	80024c8 <HAL_ADC_Stop+0x50>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa7c 	bl	8002998 <ADC_ConversionStop_Disable>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80024e6:	f7ff fe13 	bl	8002110 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0d3      	b.n	80026ba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d131      	bne.n	8002584 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d12a      	bne.n	8002584 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800252e:	e021      	b.n	8002574 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d01d      	beq.n	8002574 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_ADC_PollForConversion+0x7e>
 800253e:	f7ff fde7 	bl	8002110 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d212      	bcs.n	8002574 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	f043 0204 	orr.w	r2, r3, #4
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0a2      	b.n	80026ba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0d6      	beq.n	8002530 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002582:	e070      	b.n	8002666 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002584:	4b4f      	ldr	r3, [pc, #316]	@ (80026c4 <HAL_ADC_PollForConversion+0x1f4>)
 8002586:	681c      	ldr	r4, [r3, #0]
 8002588:	2002      	movs	r0, #2
 800258a:	f001 f99b 	bl	80038c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800258e:	4603      	mov	r3, r0
 8002590:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	4b4b      	ldr	r3, [pc, #300]	@ (80026c8 <HAL_ADC_PollForConversion+0x1f8>)
 800259c:	400b      	ands	r3, r1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x104>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68d9      	ldr	r1, [r3, #12]
 80025a8:	4b48      	ldr	r3, [pc, #288]	@ (80026cc <HAL_ADC_PollForConversion+0x1fc>)
 80025aa:	400b      	ands	r3, r1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d111      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x104>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6919      	ldr	r1, [r3, #16]
 80025b6:	4b46      	ldr	r3, [pc, #280]	@ (80026d0 <HAL_ADC_PollForConversion+0x200>)
 80025b8:	400b      	ands	r3, r1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d108      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x100>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68d9      	ldr	r1, [r3, #12]
 80025c4:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_ADC_PollForConversion+0x204>)
 80025c6:	400b      	ands	r3, r1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x100>
 80025cc:	2314      	movs	r3, #20
 80025ce:	e020      	b.n	8002612 <HAL_ADC_PollForConversion+0x142>
 80025d0:	2329      	movs	r3, #41	@ 0x29
 80025d2:	e01e      	b.n	8002612 <HAL_ADC_PollForConversion+0x142>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6919      	ldr	r1, [r3, #16]
 80025da:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_ADC_PollForConversion+0x200>)
 80025dc:	400b      	ands	r3, r1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x120>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68d9      	ldr	r1, [r3, #12]
 80025e8:	4b3a      	ldr	r3, [pc, #232]	@ (80026d4 <HAL_ADC_PollForConversion+0x204>)
 80025ea:	400b      	ands	r3, r1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <HAL_ADC_PollForConversion+0x13c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6919      	ldr	r1, [r3, #16]
 80025f6:	4b38      	ldr	r3, [pc, #224]	@ (80026d8 <HAL_ADC_PollForConversion+0x208>)
 80025f8:	400b      	ands	r3, r1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_ADC_PollForConversion+0x140>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68d9      	ldr	r1, [r3, #12]
 8002604:	4b34      	ldr	r3, [pc, #208]	@ (80026d8 <HAL_ADC_PollForConversion+0x208>)
 8002606:	400b      	ands	r3, r1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ADC_PollForConversion+0x140>
 800260c:	2354      	movs	r3, #84	@ 0x54
 800260e:	e000      	b.n	8002612 <HAL_ADC_PollForConversion+0x142>
 8002610:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002618:	e021      	b.n	800265e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d01a      	beq.n	8002658 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_ADC_PollForConversion+0x168>
 8002628:	f7ff fd72 	bl	8002110 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d20f      	bcs.n	8002658 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d90b      	bls.n	8002658 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002644:	f043 0204 	orr.w	r2, r3, #4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e030      	b.n	80026ba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	429a      	cmp	r2, r3
 8002664:	d8d9      	bhi.n	800261a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f06f 0212 	mvn.w	r2, #18
 800266e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002686:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800268a:	d115      	bne.n	80026b8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002690:	2b00      	cmp	r3, #0
 8002692:	d111      	bne.n	80026b8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	f043 0201 	orr.w	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000
 80026c8:	24924924 	.word	0x24924924
 80026cc:	00924924 	.word	0x00924924
 80026d0:	12492492 	.word	0x12492492
 80026d4:	00492492 	.word	0x00492492
 80026d8:	00249249 	.word	0x00249249

080026dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x20>
 8002710:	2302      	movs	r3, #2
 8002712:	e0dc      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1da>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b06      	cmp	r3, #6
 8002722:	d81c      	bhi.n	800275e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	3b05      	subs	r3, #5
 8002736:	221f      	movs	r2, #31
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	4019      	ands	r1, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b05      	subs	r3, #5
 8002750:	fa00 f203 	lsl.w	r2, r0, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	635a      	str	r2, [r3, #52]	@ 0x34
 800275c:	e03c      	b.n	80027d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d81c      	bhi.n	80027a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b23      	subs	r3, #35	@ 0x23
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	4019      	ands	r1, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b23      	subs	r3, #35	@ 0x23
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30
 800279e:	e01b      	b.n	80027d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b41      	subs	r3, #65	@ 0x41
 80027b2:	221f      	movs	r2, #31
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	4019      	ands	r1, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3b41      	subs	r3, #65	@ 0x41
 80027cc:	fa00 f203 	lsl.w	r2, r0, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d91c      	bls.n	800281a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	3b1e      	subs	r3, #30
 80027f2:	2207      	movs	r2, #7
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	4019      	ands	r1, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6898      	ldr	r0, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	3b1e      	subs	r3, #30
 800280c:	fa00 f203 	lsl.w	r2, r0, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	60da      	str	r2, [r3, #12]
 8002818:	e019      	b.n	800284e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6919      	ldr	r1, [r3, #16]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	2207      	movs	r2, #7
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	4019      	ands	r1, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6898      	ldr	r0, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	fa00 f203 	lsl.w	r2, r0, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b10      	cmp	r3, #16
 8002854:	d003      	beq.n	800285e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800285a:	2b11      	cmp	r3, #17
 800285c:	d132      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d125      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d126      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002884:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d11a      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <HAL_ADC_ConfigChannel+0x1e8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a13      	ldr	r2, [pc, #76]	@ (80028e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	0c9a      	lsrs	r2, r3, #18
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a4:	e002      	b.n	80028ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f9      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x1b2>
 80028b2:	e007      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012400 	.word	0x40012400
 80028dc:	20000000 	.word	0x20000000
 80028e0:	431bde83 	.word	0x431bde83

080028e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d040      	beq.n	8002984 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002912:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <ADC_Enable+0xac>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <ADC_Enable+0xb0>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	0c9b      	lsrs	r3, r3, #18
 800291e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002920:	e002      	b.n	8002928 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	3b01      	subs	r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f9      	bne.n	8002922 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800292e:	f7ff fbef 	bl	8002110 <HAL_GetTick>
 8002932:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002934:	e01f      	b.n	8002976 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002936:	f7ff fbeb 	bl	8002110 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d918      	bls.n	8002976 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d011      	beq.n	8002976 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	f043 0210 	orr.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e007      	b.n	8002986 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d1d8      	bne.n	8002936 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000000 	.word	0x20000000
 8002994:	431bde83 	.word	0x431bde83

08002998 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d12e      	bne.n	8002a10 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029c2:	f7ff fba5 	bl	8002110 <HAL_GetTick>
 80029c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029c8:	e01b      	b.n	8002a02 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029ca:	f7ff fba1 	bl	8002110 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d914      	bls.n	8002a02 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d10d      	bne.n	8002a02 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	f043 0210 	orr.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e007      	b.n	8002a12 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d0dc      	beq.n	80029ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60d3      	str	r3, [r2, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <__NVIC_GetPriorityGrouping+0x18>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	f003 0307 	and.w	r3, r3, #7
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db0b      	blt.n	8002aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	f003 021f 	and.w	r2, r3, #31
 8002a98:	4906      	ldr	r1, [pc, #24]	@ (8002ab4 <__NVIC_EnableIRQ+0x34>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e100 	.word	0xe000e100

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	@ (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	@ 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff90 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff2d 	bl	8002a1c <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff42 	bl	8002a64 <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff90 	bl	8002b0c <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5f 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff35 	bl	8002a80 <__NVIC_EnableIRQ>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ffa2 	bl	8002b70 <SysTick_Config>
 8002c2c:	4603      	mov	r3, r0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b08b      	sub	sp, #44	@ 0x2c
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c46:	2300      	movs	r3, #0
 8002c48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4a:	e161      	b.n	8002f10 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f040 8150 	bne.w	8002f0a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4a97      	ldr	r2, [pc, #604]	@ (8002ecc <HAL_GPIO_Init+0x294>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d05e      	beq.n	8002d32 <HAL_GPIO_Init+0xfa>
 8002c74:	4a95      	ldr	r2, [pc, #596]	@ (8002ecc <HAL_GPIO_Init+0x294>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d875      	bhi.n	8002d66 <HAL_GPIO_Init+0x12e>
 8002c7a:	4a95      	ldr	r2, [pc, #596]	@ (8002ed0 <HAL_GPIO_Init+0x298>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d058      	beq.n	8002d32 <HAL_GPIO_Init+0xfa>
 8002c80:	4a93      	ldr	r2, [pc, #588]	@ (8002ed0 <HAL_GPIO_Init+0x298>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d86f      	bhi.n	8002d66 <HAL_GPIO_Init+0x12e>
 8002c86:	4a93      	ldr	r2, [pc, #588]	@ (8002ed4 <HAL_GPIO_Init+0x29c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d052      	beq.n	8002d32 <HAL_GPIO_Init+0xfa>
 8002c8c:	4a91      	ldr	r2, [pc, #580]	@ (8002ed4 <HAL_GPIO_Init+0x29c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d869      	bhi.n	8002d66 <HAL_GPIO_Init+0x12e>
 8002c92:	4a91      	ldr	r2, [pc, #580]	@ (8002ed8 <HAL_GPIO_Init+0x2a0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d04c      	beq.n	8002d32 <HAL_GPIO_Init+0xfa>
 8002c98:	4a8f      	ldr	r2, [pc, #572]	@ (8002ed8 <HAL_GPIO_Init+0x2a0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d863      	bhi.n	8002d66 <HAL_GPIO_Init+0x12e>
 8002c9e:	4a8f      	ldr	r2, [pc, #572]	@ (8002edc <HAL_GPIO_Init+0x2a4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d046      	beq.n	8002d32 <HAL_GPIO_Init+0xfa>
 8002ca4:	4a8d      	ldr	r2, [pc, #564]	@ (8002edc <HAL_GPIO_Init+0x2a4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d85d      	bhi.n	8002d66 <HAL_GPIO_Init+0x12e>
 8002caa:	2b12      	cmp	r3, #18
 8002cac:	d82a      	bhi.n	8002d04 <HAL_GPIO_Init+0xcc>
 8002cae:	2b12      	cmp	r3, #18
 8002cb0:	d859      	bhi.n	8002d66 <HAL_GPIO_Init+0x12e>
 8002cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb8 <HAL_GPIO_Init+0x80>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002d33 	.word	0x08002d33
 8002cbc:	08002d0d 	.word	0x08002d0d
 8002cc0:	08002d1f 	.word	0x08002d1f
 8002cc4:	08002d61 	.word	0x08002d61
 8002cc8:	08002d67 	.word	0x08002d67
 8002ccc:	08002d67 	.word	0x08002d67
 8002cd0:	08002d67 	.word	0x08002d67
 8002cd4:	08002d67 	.word	0x08002d67
 8002cd8:	08002d67 	.word	0x08002d67
 8002cdc:	08002d67 	.word	0x08002d67
 8002ce0:	08002d67 	.word	0x08002d67
 8002ce4:	08002d67 	.word	0x08002d67
 8002ce8:	08002d67 	.word	0x08002d67
 8002cec:	08002d67 	.word	0x08002d67
 8002cf0:	08002d67 	.word	0x08002d67
 8002cf4:	08002d67 	.word	0x08002d67
 8002cf8:	08002d67 	.word	0x08002d67
 8002cfc:	08002d15 	.word	0x08002d15
 8002d00:	08002d29 	.word	0x08002d29
 8002d04:	4a76      	ldr	r2, [pc, #472]	@ (8002ee0 <HAL_GPIO_Init+0x2a8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d0a:	e02c      	b.n	8002d66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	623b      	str	r3, [r7, #32]
          break;
 8002d12:	e029      	b.n	8002d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	623b      	str	r3, [r7, #32]
          break;
 8002d1c:	e024      	b.n	8002d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	3308      	adds	r3, #8
 8002d24:	623b      	str	r3, [r7, #32]
          break;
 8002d26:	e01f      	b.n	8002d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	623b      	str	r3, [r7, #32]
          break;
 8002d30:	e01a      	b.n	8002d68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e013      	b.n	8002d68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d48:	2308      	movs	r3, #8
 8002d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	611a      	str	r2, [r3, #16]
          break;
 8002d52:	e009      	b.n	8002d68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d54:	2308      	movs	r3, #8
 8002d56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	615a      	str	r2, [r3, #20]
          break;
 8002d5e:	e003      	b.n	8002d68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d60:	2300      	movs	r3, #0
 8002d62:	623b      	str	r3, [r7, #32]
          break;
 8002d64:	e000      	b.n	8002d68 <HAL_GPIO_Init+0x130>
          break;
 8002d66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2bff      	cmp	r3, #255	@ 0xff
 8002d6c:	d801      	bhi.n	8002d72 <HAL_GPIO_Init+0x13a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_Init+0x13e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2bff      	cmp	r3, #255	@ 0xff
 8002d7c:	d802      	bhi.n	8002d84 <HAL_GPIO_Init+0x14c>
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	e002      	b.n	8002d8a <HAL_GPIO_Init+0x152>
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	3b08      	subs	r3, #8
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	210f      	movs	r1, #15
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	6a39      	ldr	r1, [r7, #32]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	431a      	orrs	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80a9 	beq.w	8002f0a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002db8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_GPIO_Init+0x2ac>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	4a49      	ldr	r2, [pc, #292]	@ (8002ee4 <HAL_GPIO_Init+0x2ac>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6193      	str	r3, [r2, #24]
 8002dc4:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_GPIO_Init+0x2ac>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dd0:	4a45      	ldr	r2, [pc, #276]	@ (8002ee8 <HAL_GPIO_Init+0x2b0>)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3d      	ldr	r2, [pc, #244]	@ (8002eec <HAL_GPIO_Init+0x2b4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00d      	beq.n	8002e18 <HAL_GPIO_Init+0x1e0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a3c      	ldr	r2, [pc, #240]	@ (8002ef0 <HAL_GPIO_Init+0x2b8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <HAL_GPIO_Init+0x1dc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef4 <HAL_GPIO_Init+0x2bc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_GPIO_Init+0x1d8>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e004      	b.n	8002e1a <HAL_GPIO_Init+0x1e2>
 8002e10:	2303      	movs	r3, #3
 8002e12:	e002      	b.n	8002e1a <HAL_GPIO_Init+0x1e2>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_GPIO_Init+0x1e2>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1c:	f002 0203 	and.w	r2, r2, #3
 8002e20:	0092      	lsls	r2, r2, #2
 8002e22:	4093      	lsls	r3, r2
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e2a:	492f      	ldr	r1, [pc, #188]	@ (8002ee8 <HAL_GPIO_Init+0x2b0>)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e44:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	492b      	ldr	r1, [pc, #172]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e52:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	4927      	ldr	r1, [pc, #156]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4921      	ldr	r1, [pc, #132]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	491d      	ldr	r1, [pc, #116]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e94:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4917      	ldr	r1, [pc, #92]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	4913      	ldr	r1, [pc, #76]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01f      	beq.n	8002efc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	490d      	ldr	r1, [pc, #52]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e01f      	b.n	8002f0a <HAL_GPIO_Init+0x2d2>
 8002eca:	bf00      	nop
 8002ecc:	10320000 	.word	0x10320000
 8002ed0:	10310000 	.word	0x10310000
 8002ed4:	10220000 	.word	0x10220000
 8002ed8:	10210000 	.word	0x10210000
 8002edc:	10120000 	.word	0x10120000
 8002ee0:	10110000 	.word	0x10110000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	40010c00 	.word	0x40010c00
 8002ef4:	40011000 	.word	0x40011000
 8002ef8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_GPIO_Init+0x2f4>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	4909      	ldr	r1, [pc, #36]	@ (8002f2c <HAL_GPIO_Init+0x2f4>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f47f ae96 	bne.w	8002c4c <HAL_GPIO_Init+0x14>
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	372c      	adds	r7, #44	@ 0x2c
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	40010400 	.word	0x40010400

08002f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f40:	787b      	ldrb	r3, [r7, #1]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f4c:	e003      	b.n	8002f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	041a      	lsls	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e272      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8087 	beq.w	800308e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f80:	4b92      	ldr	r3, [pc, #584]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d112      	bne.n	8002fbe <HAL_RCC_OscConfig+0x5e>
 8002f98:	4b8c      	ldr	r3, [pc, #560]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d10b      	bne.n	8002fbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa6:	4b89      	ldr	r3, [pc, #548]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d06c      	beq.n	800308c <HAL_RCC_OscConfig+0x12c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d168      	bne.n	800308c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e24c      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x76>
 8002fc8:	4b80      	ldr	r3, [pc, #512]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a7f      	ldr	r2, [pc, #508]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e02e      	b.n	8003034 <HAL_RCC_OscConfig+0xd4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x98>
 8002fde:	4b7b      	ldr	r3, [pc, #492]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7a      	ldr	r2, [pc, #488]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b78      	ldr	r3, [pc, #480]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a77      	ldr	r2, [pc, #476]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xd4>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0xbc>
 8003002:	4b72      	ldr	r3, [pc, #456]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a71      	ldr	r2, [pc, #452]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b6f      	ldr	r3, [pc, #444]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6e      	ldr	r2, [pc, #440]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xd4>
 800301c:	4b6b      	ldr	r3, [pc, #428]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6a      	ldr	r2, [pc, #424]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b68      	ldr	r3, [pc, #416]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a67      	ldr	r2, [pc, #412]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003032:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7ff f868 	bl	8002110 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7ff f864 	bl	8002110 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e200      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b5d      	ldr	r3, [pc, #372]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xe4>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff f854 	bl	8002110 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff f850 	bl	8002110 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e1ec      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b53      	ldr	r3, [pc, #332]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x10c>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d063      	beq.n	8003162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309a:	4b4c      	ldr	r3, [pc, #304]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030a6:	4b49      	ldr	r3, [pc, #292]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d11c      	bne.n	80030ec <HAL_RCC_OscConfig+0x18c>
 80030b2:	4b46      	ldr	r3, [pc, #280]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	4b43      	ldr	r3, [pc, #268]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x176>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1c0      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b3d      	ldr	r3, [pc, #244]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4939      	ldr	r1, [pc, #228]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	e03a      	b.n	8003162 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f4:	4b36      	ldr	r3, [pc, #216]	@ (80031d0 <HAL_RCC_OscConfig+0x270>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fa:	f7ff f809 	bl	8002110 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7ff f805 	bl	8002110 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1a1      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	4b2d      	ldr	r3, [pc, #180]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b2a      	ldr	r3, [pc, #168]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4927      	ldr	r1, [pc, #156]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
 8003134:	e015      	b.n	8003162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003136:	4b26      	ldr	r3, [pc, #152]	@ (80031d0 <HAL_RCC_OscConfig+0x270>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe ffe8 	bl	8002110 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003144:	f7fe ffe4 	bl	8002110 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e180      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d03a      	beq.n	80031e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d019      	beq.n	80031aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003176:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <HAL_RCC_OscConfig+0x274>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe ffc8 	bl	8002110 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003184:	f7fe ffc4 	bl	8002110 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e160      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003196:	4b0d      	ldr	r3, [pc, #52]	@ (80031cc <HAL_RCC_OscConfig+0x26c>)
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f000 faba 	bl	800371c <RCC_Delay>
 80031a8:	e01c      	b.n	80031e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031aa:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <HAL_RCC_OscConfig+0x274>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b0:	f7fe ffae 	bl	8002110 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b6:	e00f      	b.n	80031d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b8:	f7fe ffaa 	bl	8002110 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d908      	bls.n	80031d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e146      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	42420000 	.word	0x42420000
 80031d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b92      	ldr	r3, [pc, #584]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e9      	bne.n	80031b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a6 	beq.w	800333e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	4b88      	ldr	r3, [pc, #544]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	4a87      	ldr	r2, [pc, #540]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320c:	61d3      	str	r3, [r2, #28]
 800320e:	4b85      	ldr	r3, [pc, #532]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b82      	ldr	r3, [pc, #520]	@ (8003428 <HAL_RCC_OscConfig+0x4c8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322a:	4b7f      	ldr	r3, [pc, #508]	@ (8003428 <HAL_RCC_OscConfig+0x4c8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7e      	ldr	r2, [pc, #504]	@ (8003428 <HAL_RCC_OscConfig+0x4c8>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003236:	f7fe ff6b 	bl	8002110 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7fe ff67 	bl	8002110 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	@ 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e103      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b75      	ldr	r3, [pc, #468]	@ (8003428 <HAL_RCC_OscConfig+0x4c8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x312>
 8003264:	4b6f      	ldr	r3, [pc, #444]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4a6e      	ldr	r2, [pc, #440]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6213      	str	r3, [r2, #32]
 8003270:	e02d      	b.n	80032ce <HAL_RCC_OscConfig+0x36e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x334>
 800327a:	4b6a      	ldr	r3, [pc, #424]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a69      	ldr	r2, [pc, #420]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6213      	str	r3, [r2, #32]
 8003286:	4b67      	ldr	r3, [pc, #412]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a66      	ldr	r2, [pc, #408]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	6213      	str	r3, [r2, #32]
 8003292:	e01c      	b.n	80032ce <HAL_RCC_OscConfig+0x36e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x356>
 800329c:	4b61      	ldr	r3, [pc, #388]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4a60      	ldr	r2, [pc, #384]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6213      	str	r3, [r2, #32]
 80032a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6213      	str	r3, [r2, #32]
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x36e>
 80032b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6213      	str	r3, [r2, #32]
 80032c2:	4b58      	ldr	r3, [pc, #352]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4a57      	ldr	r2, [pc, #348]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d6:	f7fe ff1b 	bl	8002110 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe ff17 	bl	8002110 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0b1      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCC_OscConfig+0x37e>
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fe ff05 	bl	8002110 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe ff01 	bl	8002110 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e09b      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	4b40      	ldr	r3, [pc, #256]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b3c      	ldr	r3, [pc, #240]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a3b      	ldr	r2, [pc, #236]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800333c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8087 	beq.w	8003456 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003348:	4b36      	ldr	r3, [pc, #216]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d061      	beq.n	8003418 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d146      	bne.n	80033ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b33      	ldr	r3, [pc, #204]	@ (800342c <HAL_RCC_OscConfig+0x4cc>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fed5 	bl	8002110 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe fed1 	bl	8002110 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e06d      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337c:	4b29      	ldr	r3, [pc, #164]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003390:	d108      	bne.n	80033a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003392:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4921      	ldr	r1, [pc, #132]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a19      	ldr	r1, [r3, #32]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	430b      	orrs	r3, r1
 80033b6:	491b      	ldr	r1, [pc, #108]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x4cc>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fe fea5 	bl	8002110 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fea1 	bl	8002110 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e03d      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033dc:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x46a>
 80033e8:	e035      	b.n	8003456 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b10      	ldr	r3, [pc, #64]	@ (800342c <HAL_RCC_OscConfig+0x4cc>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe fe8e 	bl	8002110 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe fe8a 	bl	8002110 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e026      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340a:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <HAL_RCC_OscConfig+0x4c4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x498>
 8003416:	e01e      	b.n	8003456 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d107      	bne.n	8003430 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e019      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
 8003424:	40021000 	.word	0x40021000
 8003428:	40007000 	.word	0x40007000
 800342c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <HAL_RCC_OscConfig+0x500>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	429a      	cmp	r2, r3
 8003442:	d106      	bne.n	8003452 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000

08003464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0d0      	b.n	800361a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003478:	4b6a      	ldr	r3, [pc, #424]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d910      	bls.n	80034a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b67      	ldr	r3, [pc, #412]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 0207 	bic.w	r2, r3, #7
 800348e:	4965      	ldr	r1, [pc, #404]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b63      	ldr	r3, [pc, #396]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0b8      	b.n	800361a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c0:	4b59      	ldr	r3, [pc, #356]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a58      	ldr	r2, [pc, #352]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d8:	4b53      	ldr	r3, [pc, #332]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a52      	ldr	r2, [pc, #328]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80034e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e4:	4b50      	ldr	r3, [pc, #320]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	494d      	ldr	r1, [pc, #308]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d040      	beq.n	8003584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b47      	ldr	r3, [pc, #284]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d115      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e07f      	b.n	800361a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003522:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e073      	b.n	800361a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003532:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06b      	b.n	800361a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003542:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f023 0203 	bic.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4936      	ldr	r1, [pc, #216]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003554:	f7fe fddc 	bl	8002110 <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	e00a      	b.n	8003572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355c:	f7fe fdd8 	bl	8002110 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e053      	b.n	800361a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	4b2d      	ldr	r3, [pc, #180]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 020c 	and.w	r2, r3, #12
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	429a      	cmp	r2, r3
 8003582:	d1eb      	bne.n	800355c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b27      	ldr	r3, [pc, #156]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d210      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b24      	ldr	r3, [pc, #144]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	4922      	ldr	r1, [pc, #136]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e032      	b.n	800361a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c0:	4b19      	ldr	r3, [pc, #100]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4916      	ldr	r1, [pc, #88]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	490e      	ldr	r1, [pc, #56]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035f2:	f000 f821 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	490a      	ldr	r1, [pc, #40]	@ (800362c <HAL_RCC_ClockConfig+0x1c8>)
 8003604:	5ccb      	ldrb	r3, [r1, r3]
 8003606:	fa22 f303 	lsr.w	r3, r2, r3
 800360a:	4a09      	ldr	r2, [pc, #36]	@ (8003630 <HAL_RCC_ClockConfig+0x1cc>)
 800360c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800360e:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <HAL_RCC_ClockConfig+0x1d0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fd3a 	bl	800208c <HAL_InitTick>

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40022000 	.word	0x40022000
 8003628:	40021000 	.word	0x40021000
 800362c:	08006bbc 	.word	0x08006bbc
 8003630:	20000000 	.word	0x20000000
 8003634:	20000004 	.word	0x20000004

08003638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003652:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d002      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x30>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d003      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x36>
 8003666:	e027      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003668:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800366a:	613b      	str	r3, [r7, #16]
      break;
 800366c:	e027      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	0c9b      	lsrs	r3, r3, #18
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	4a17      	ldr	r2, [pc, #92]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003678:	5cd3      	ldrb	r3, [r2, r3]
 800367a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003686:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0c5b      	lsrs	r3, r3, #17
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	4a11      	ldr	r2, [pc, #68]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a0d      	ldr	r2, [pc, #52]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800369a:	fb03 f202 	mul.w	r2, r3, r2
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e004      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a0c      	ldr	r2, [pc, #48]	@ (80036dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	613b      	str	r3, [r7, #16]
      break;
 80036b6:	e002      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ba:	613b      	str	r3, [r7, #16]
      break;
 80036bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036be:	693b      	ldr	r3, [r7, #16]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	007a1200 	.word	0x007a1200
 80036d4:	08006bd4 	.word	0x08006bd4
 80036d8:	08006be4 	.word	0x08006be4
 80036dc:	003d0900 	.word	0x003d0900

080036e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e4:	4b02      	ldr	r3, [pc, #8]	@ (80036f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80036e6:	681b      	ldr	r3, [r3, #0]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	20000000 	.word	0x20000000

080036f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036f8:	f7ff fff2 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	0adb      	lsrs	r3, r3, #11
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	@ (8003718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	08006bcc 	.word	0x08006bcc

0800371c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003724:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <RCC_Delay+0x34>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <RCC_Delay+0x38>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0a5b      	lsrs	r3, r3, #9
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003738:	bf00      	nop
  }
  while (Delay --);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e5a      	subs	r2, r3, #1
 800373e:	60fa      	str	r2, [r7, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f9      	bne.n	8003738 <RCC_Delay+0x1c>
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	20000000 	.word	0x20000000
 8003754:	10624dd3 	.word	0x10624dd3

08003758 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d07d      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003778:	4b4f      	ldr	r3, [pc, #316]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b4c      	ldr	r3, [pc, #304]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4a4b      	ldr	r2, [pc, #300]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378e:	61d3      	str	r3, [r2, #28]
 8003790:	4b49      	ldr	r3, [pc, #292]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379c:	2301      	movs	r3, #1
 800379e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	4b46      	ldr	r3, [pc, #280]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d118      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ac:	4b43      	ldr	r3, [pc, #268]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a42      	ldr	r2, [pc, #264]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b8:	f7fe fcaa 	bl	8002110 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037be:	e008      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c0:	f7fe fca6 	bl	8002110 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	@ 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e06d      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d2:	4b3a      	ldr	r3, [pc, #232]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037de:	4b36      	ldr	r3, [pc, #216]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02e      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d027      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037fc:	4b2e      	ldr	r3, [pc, #184]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003804:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003806:	4b2e      	ldr	r3, [pc, #184]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800380c:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003812:	4a29      	ldr	r2, [pc, #164]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d014      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003822:	f7fe fc75 	bl	8002110 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe fc71 	bl	8002110 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e036      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	4b1d      	ldr	r3, [pc, #116]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ee      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800384c:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4917      	ldr	r1, [pc, #92]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385a:	4313      	orrs	r3, r2
 800385c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b14      	ldr	r3, [pc, #80]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4a13      	ldr	r2, [pc, #76]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800387c:	4b0e      	ldr	r3, [pc, #56]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	490b      	ldr	r1, [pc, #44]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800389a:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	4904      	ldr	r1, [pc, #16]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
 80038c0:	42420440 	.word	0x42420440

080038c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	f200 808a 	bhi.w	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d045      	beq.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d075      	beq.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80038fa:	e082      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80038fc:	4b46      	ldr	r3, [pc, #280]	@ (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003902:	4b45      	ldr	r3, [pc, #276]	@ (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07b      	beq.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	0c9b      	lsrs	r3, r3, #18
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	4a41      	ldr	r2, [pc, #260]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003918:	5cd3      	ldrb	r3, [r2, r3]
 800391a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d015      	beq.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003926:	4b3c      	ldr	r3, [pc, #240]	@ (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	0c5b      	lsrs	r3, r3, #17
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	4a3b      	ldr	r2, [pc, #236]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003940:	4a38      	ldr	r2, [pc, #224]	@ (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	fbb2 f2f3 	udiv	r2, r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e004      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4a34      	ldr	r2, [pc, #208]	@ (8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800395c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003968:	d102      	bne.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	61bb      	str	r3, [r7, #24]
      break;
 800396e:	e04a      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4a2d      	ldr	r2, [pc, #180]	@ (8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	61bb      	str	r3, [r7, #24]
      break;
 800397e:	e042      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003980:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003990:	d108      	bne.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800399c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e01f      	b.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ae:	d109      	bne.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80039bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	e00f      	b.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039ce:	d11c      	bne.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80039d0:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d016      	beq.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80039dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80039e0:	61bb      	str	r3, [r7, #24]
      break;
 80039e2:	e012      	b.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80039e4:	e011      	b.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80039e6:	f7ff fe85 	bl	80036f4 <HAL_RCC_GetPCLK2Freq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0b9b      	lsrs	r3, r3, #14
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	3301      	adds	r3, #1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	61bb      	str	r3, [r7, #24]
      break;
 8003a00:	e004      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a02:	bf00      	nop
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a0a:	bf00      	nop
    }
  }
  return (frequency);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08006be8 	.word	0x08006be8
 8003a20:	08006bf8 	.word	0x08006bf8
 8003a24:	007a1200 	.word	0x007a1200
 8003a28:	003d0900 	.word	0x003d0900
 8003a2c:	aaaaaaab 	.word	0xaaaaaaab

08003a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe f9ce 	bl	8001df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 fe42 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e02d      	b.n	8003b44 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a16      	ldr	r2, [pc, #88]	@ (8003b50 <HAL_TIM_Base_Start+0x80>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_TIM_Base_Start+0x3e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b02:	d004      	beq.n	8003b0e <HAL_TIM_Base_Start+0x3e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a12      	ldr	r2, [pc, #72]	@ (8003b54 <HAL_TIM_Base_Start+0x84>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d111      	bne.n	8003b32 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b06      	cmp	r3, #6
 8003b1e:	d010      	beq.n	8003b42 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b30:	e007      	b.n	8003b42 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40000400 	.word	0x40000400

08003b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e041      	b.n	8003bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f839 	bl	8003bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f000 fdae 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_TIM_PWM_Start+0x24>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e022      	b.n	8003c72 <HAL_TIM_PWM_Start+0x6a>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d109      	bne.n	8003c46 <HAL_TIM_PWM_Start+0x3e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e015      	b.n	8003c72 <HAL_TIM_PWM_Start+0x6a>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIM_PWM_Start+0x58>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e008      	b.n	8003c72 <HAL_TIM_PWM_Start+0x6a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e059      	b.n	8003d2e <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_PWM_Start+0x82>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c88:	e013      	b.n	8003cb2 <HAL_TIM_PWM_Start+0xaa>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x92>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c98:	e00b      	b.n	8003cb2 <HAL_TIM_PWM_Start+0xaa>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_PWM_Start+0xa2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ca8:	e003      	b.n	8003cb2 <HAL_TIM_PWM_Start+0xaa>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f8a5 	bl	8004e0a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d38 <HAL_TIM_PWM_Start+0x130>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d107      	bne.n	8003cda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a16      	ldr	r2, [pc, #88]	@ (8003d38 <HAL_TIM_PWM_Start+0x130>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_TIM_PWM_Start+0xf0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cec:	d004      	beq.n	8003cf8 <HAL_TIM_PWM_Start+0xf0>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a12      	ldr	r2, [pc, #72]	@ (8003d3c <HAL_TIM_PWM_Start+0x134>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d111      	bne.n	8003d1c <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d010      	beq.n	8003d2c <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1a:	e007      	b.n	8003d2c <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400

08003d40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e041      	b.n	8003dd6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f839 	bl	8003dde <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 fcba 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <HAL_TIM_IC_Start_IT+0x1e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e013      	b.n	8003e36 <HAL_TIM_IC_Start_IT+0x46>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d104      	bne.n	8003e1e <HAL_TIM_IC_Start_IT+0x2e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	e00b      	b.n	8003e36 <HAL_TIM_IC_Start_IT+0x46>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d104      	bne.n	8003e2e <HAL_TIM_IC_Start_IT+0x3e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	e003      	b.n	8003e36 <HAL_TIM_IC_Start_IT+0x46>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <HAL_TIM_IC_Start_IT+0x58>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e013      	b.n	8003e70 <HAL_TIM_IC_Start_IT+0x80>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d104      	bne.n	8003e58 <HAL_TIM_IC_Start_IT+0x68>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e00b      	b.n	8003e70 <HAL_TIM_IC_Start_IT+0x80>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d104      	bne.n	8003e68 <HAL_TIM_IC_Start_IT+0x78>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e003      	b.n	8003e70 <HAL_TIM_IC_Start_IT+0x80>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e72:	7bbb      	ldrb	r3, [r7, #14]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d102      	bne.n	8003e7e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e78:	7b7b      	ldrb	r3, [r7, #13]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d001      	beq.n	8003e82 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0b3      	b.n	8003fea <HAL_TIM_IC_Start_IT+0x1fa>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_IC_Start_IT+0xa2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e90:	e013      	b.n	8003eba <HAL_TIM_IC_Start_IT+0xca>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_IC_Start_IT+0xb2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ea0:	e00b      	b.n	8003eba <HAL_TIM_IC_Start_IT+0xca>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_IC_Start_IT+0xc2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb0:	e003      	b.n	8003eba <HAL_TIM_IC_Start_IT+0xca>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_IC_Start_IT+0xda>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ec8:	e013      	b.n	8003ef2 <HAL_TIM_IC_Start_IT+0x102>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_IC_Start_IT+0xea>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ed8:	e00b      	b.n	8003ef2 <HAL_TIM_IC_Start_IT+0x102>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_IC_Start_IT+0xfa>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee8:	e003      	b.n	8003ef2 <HAL_TIM_IC_Start_IT+0x102>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b0c      	cmp	r3, #12
 8003ef6:	d841      	bhi.n	8003f7c <HAL_TIM_IC_Start_IT+0x18c>
 8003ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <HAL_TIM_IC_Start_IT+0x110>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f35 	.word	0x08003f35
 8003f04:	08003f7d 	.word	0x08003f7d
 8003f08:	08003f7d 	.word	0x08003f7d
 8003f0c:	08003f7d 	.word	0x08003f7d
 8003f10:	08003f47 	.word	0x08003f47
 8003f14:	08003f7d 	.word	0x08003f7d
 8003f18:	08003f7d 	.word	0x08003f7d
 8003f1c:	08003f7d 	.word	0x08003f7d
 8003f20:	08003f59 	.word	0x08003f59
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f7d 	.word	0x08003f7d
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f6b 	.word	0x08003f6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0202 	orr.w	r2, r2, #2
 8003f42:	60da      	str	r2, [r3, #12]
      break;
 8003f44:	e01d      	b.n	8003f82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0204 	orr.w	r2, r2, #4
 8003f54:	60da      	str	r2, [r3, #12]
      break;
 8003f56:	e014      	b.n	8003f82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0208 	orr.w	r2, r2, #8
 8003f66:	60da      	str	r2, [r3, #12]
      break;
 8003f68:	e00b      	b.n	8003f82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0210 	orr.w	r2, r2, #16
 8003f78:	60da      	str	r2, [r3, #12]
      break;
 8003f7a:	e002      	b.n	8003f82 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d12f      	bne.n	8003fe8 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	6839      	ldr	r1, [r7, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 ff3a 	bl	8004e0a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ff4 <HAL_TIM_IC_Start_IT+0x204>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_TIM_IC_Start_IT+0x1c4>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa8:	d004      	beq.n	8003fb4 <HAL_TIM_IC_Start_IT+0x1c4>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a12      	ldr	r2, [pc, #72]	@ (8003ff8 <HAL_TIM_IC_Start_IT+0x208>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d111      	bne.n	8003fd8 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	d010      	beq.n	8003fe8 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0201 	orr.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd6:	e007      	b.n	8003fe8 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40000400 	.word	0x40000400

08003ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d020      	beq.n	8004060 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01b      	beq.n	8004060 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0202 	mvn.w	r2, #2
 8004030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fa84 	bl	8001554 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fb37 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fb3d 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d020      	beq.n	80040ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01b      	beq.n	80040ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0204 	mvn.w	r2, #4
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd fa5e 	bl	8001554 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fb11 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb17 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d020      	beq.n	80040f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01b      	beq.n	80040f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0208 	mvn.w	r2, #8
 80040c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fa38 	bl	8001554 <HAL_TIM_IC_CaptureCallback>
 80040e4:	e005      	b.n	80040f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 faeb 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 faf1 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d020      	beq.n	8004144 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01b      	beq.n	8004144 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0210 	mvn.w	r2, #16
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2208      	movs	r2, #8
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd fa12 	bl	8001554 <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fac5 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 facb 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0201 	mvn.w	r2, #1
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 faa4 	bl	80046b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fec5 	bl	8004f16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa9b 	bl	80046e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0220 	mvn.w	r2, #32
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fe98 	bl	8004f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_IC_ConfigChannel+0x1e>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e088      	b.n	800430c <HAL_TIM_IC_ConfigChannel+0x130>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004218:	f000 fc5a 	bl	8004ad0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 020c 	bic.w	r2, r2, #12
 800422a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6999      	ldr	r1, [r3, #24]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	619a      	str	r2, [r3, #24]
 800423e:	e060      	b.n	8004302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d11c      	bne.n	8004280 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004256:	f000 fcbd 	bl	8004bd4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699a      	ldr	r2, [r3, #24]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004268:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6999      	ldr	r1, [r3, #24]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	619a      	str	r2, [r3, #24]
 800427e:	e040      	b.n	8004302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b08      	cmp	r3, #8
 8004284:	d11b      	bne.n	80042be <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004296:	f000 fd08 	bl	8004caa <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 020c 	bic.w	r2, r2, #12
 80042a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]
 80042bc:	e021      	b.n	8004302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d11c      	bne.n	80042fe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80042d4:	f000 fd24 	bl	8004d20 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69d9      	ldr	r1, [r3, #28]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	021a      	lsls	r2, r3, #8
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	61da      	str	r2, [r3, #28]
 80042fc:	e001      	b.n	8004302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800430a:	7dfb      	ldrb	r3, [r7, #23]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800432e:	2302      	movs	r3, #2
 8004330:	e0ae      	b.n	8004490 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	f200 809f 	bhi.w	8004480 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004342:	a201      	add	r2, pc, #4	@ (adr r2, 8004348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800437d 	.word	0x0800437d
 800434c:	08004481 	.word	0x08004481
 8004350:	08004481 	.word	0x08004481
 8004354:	08004481 	.word	0x08004481
 8004358:	080043bd 	.word	0x080043bd
 800435c:	08004481 	.word	0x08004481
 8004360:	08004481 	.word	0x08004481
 8004364:	08004481 	.word	0x08004481
 8004368:	080043ff 	.word	0x080043ff
 800436c:	08004481 	.word	0x08004481
 8004370:	08004481 	.word	0x08004481
 8004374:	08004481 	.word	0x08004481
 8004378:	0800443f 	.word	0x0800443f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fa1c 	bl	80047c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0208 	orr.w	r2, r2, #8
 8004396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0204 	bic.w	r2, r2, #4
 80043a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6999      	ldr	r1, [r3, #24]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	619a      	str	r2, [r3, #24]
      break;
 80043ba:	e064      	b.n	8004486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fa62 	bl	800488c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6999      	ldr	r1, [r3, #24]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	021a      	lsls	r2, r3, #8
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	619a      	str	r2, [r3, #24]
      break;
 80043fc:	e043      	b.n	8004486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 faab 	bl	8004960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0208 	orr.w	r2, r2, #8
 8004418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0204 	bic.w	r2, r2, #4
 8004428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69d9      	ldr	r1, [r3, #28]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	61da      	str	r2, [r3, #28]
      break;
 800443c:	e023      	b.n	8004486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 faf5 	bl	8004a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69d9      	ldr	r1, [r3, #28]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	021a      	lsls	r2, r3, #8
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	61da      	str	r2, [r3, #28]
      break;
 800447e:	e002      	b.n	8004486 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
      break;
 8004484:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800448e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e0b4      	b.n	800461e <HAL_TIM_ConfigClockSource+0x186>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ec:	d03e      	beq.n	800456c <HAL_TIM_ConfigClockSource+0xd4>
 80044ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f2:	f200 8087 	bhi.w	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044fa:	f000 8086 	beq.w	800460a <HAL_TIM_ConfigClockSource+0x172>
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004502:	d87f      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b70      	cmp	r3, #112	@ 0x70
 8004506:	d01a      	beq.n	800453e <HAL_TIM_ConfigClockSource+0xa6>
 8004508:	2b70      	cmp	r3, #112	@ 0x70
 800450a:	d87b      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b60      	cmp	r3, #96	@ 0x60
 800450e:	d050      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004510:	2b60      	cmp	r3, #96	@ 0x60
 8004512:	d877      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b50      	cmp	r3, #80	@ 0x50
 8004516:	d03c      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0xfa>
 8004518:	2b50      	cmp	r3, #80	@ 0x50
 800451a:	d873      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b40      	cmp	r3, #64	@ 0x40
 800451e:	d058      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004520:	2b40      	cmp	r3, #64	@ 0x40
 8004522:	d86f      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b30      	cmp	r3, #48	@ 0x30
 8004526:	d064      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004528:	2b30      	cmp	r3, #48	@ 0x30
 800452a:	d86b      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b20      	cmp	r3, #32
 800452e:	d060      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004530:	2b20      	cmp	r3, #32
 8004532:	d867      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d05c      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	2b10      	cmp	r3, #16
 800453a:	d05a      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x15a>
 800453c:	e062      	b.n	8004604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	f000 fc3d 	bl	8004dcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	609a      	str	r2, [r3, #8]
      break;
 800456a:	e04f      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	f000 fc26 	bl	8004dcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800458e:	609a      	str	r2, [r3, #8]
      break;
 8004590:	e03c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800459e:	461a      	mov	r2, r3
 80045a0:	f000 faea 	bl	8004b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2150      	movs	r1, #80	@ 0x50
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fbf4 	bl	8004d98 <TIM_ITRx_SetConfig>
      break;
 80045b0:	e02c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 fb44 	bl	8004c4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2160      	movs	r1, #96	@ 0x60
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fbe4 	bl	8004d98 <TIM_ITRx_SetConfig>
      break;
 80045d0:	e01c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	461a      	mov	r2, r3
 80045e0:	f000 faca 	bl	8004b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2140      	movs	r1, #64	@ 0x40
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fbd4 	bl	8004d98 <TIM_ITRx_SetConfig>
      break;
 80045f0:	e00c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f000 fbcb 	bl	8004d98 <TIM_ITRx_SetConfig>
      break;
 8004602:	e003      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	e000      	b.n	800460c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800460a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d831      	bhi.n	80046a0 <HAL_TIM_ReadCapturedValue+0x78>
 800463c:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <HAL_TIM_ReadCapturedValue+0x1c>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004679 	.word	0x08004679
 8004648:	080046a1 	.word	0x080046a1
 800464c:	080046a1 	.word	0x080046a1
 8004650:	080046a1 	.word	0x080046a1
 8004654:	08004683 	.word	0x08004683
 8004658:	080046a1 	.word	0x080046a1
 800465c:	080046a1 	.word	0x080046a1
 8004660:	080046a1 	.word	0x080046a1
 8004664:	0800468d 	.word	0x0800468d
 8004668:	080046a1 	.word	0x080046a1
 800466c:	080046a1 	.word	0x080046a1
 8004670:	080046a1 	.word	0x080046a1
 8004674:	08004697 	.word	0x08004697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467e:	60fb      	str	r3, [r7, #12]

      break;
 8004680:	e00f      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	60fb      	str	r3, [r7, #12]

      break;
 800468a:	e00a      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	60fb      	str	r3, [r7, #12]

      break;
 8004694:	e005      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	60fb      	str	r3, [r7, #12]

      break;
 800469e:	e000      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80046a0:	bf00      	nop
  }

  return tmpreg;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop

080046b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a2b      	ldr	r2, [pc, #172]	@ (80047b8 <TIM_Base_SetConfig+0xc0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_Base_SetConfig+0x28>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004716:	d003      	beq.n	8004720 <TIM_Base_SetConfig+0x28>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a28      	ldr	r2, [pc, #160]	@ (80047bc <TIM_Base_SetConfig+0xc4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d108      	bne.n	8004732 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a20      	ldr	r2, [pc, #128]	@ (80047b8 <TIM_Base_SetConfig+0xc0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_Base_SetConfig+0x52>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004740:	d003      	beq.n	800474a <TIM_Base_SetConfig+0x52>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1d      	ldr	r2, [pc, #116]	@ (80047bc <TIM_Base_SetConfig+0xc4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d108      	bne.n	800475c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a0d      	ldr	r2, [pc, #52]	@ (80047b8 <TIM_Base_SetConfig+0xc0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d103      	bne.n	8004790 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f023 0201 	bic.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	611a      	str	r2, [r3, #16]
  }
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40000400 	.word	0x40000400

080047c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f023 0201 	bic.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 0302 	bic.w	r3, r3, #2
 8004808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <TIM_OC1_SetConfig+0xc8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d10c      	bne.n	8004836 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0308 	bic.w	r3, r3, #8
 8004822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <TIM_OC1_SetConfig+0xc8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d111      	bne.n	8004862 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00

0800488c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f023 0210 	bic.w	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0320 	bic.w	r3, r3, #32
 80048d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1d      	ldr	r2, [pc, #116]	@ (800495c <TIM_OC2_SetConfig+0xd0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10d      	bne.n	8004908 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004906:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a14      	ldr	r2, [pc, #80]	@ (800495c <TIM_OC2_SetConfig+0xd0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d113      	bne.n	8004938 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800491e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	40012c00 	.word	0x40012c00

08004960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a30 <TIM_OC3_SetConfig+0xd0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10d      	bne.n	80049da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a14      	ldr	r2, [pc, #80]	@ (8004a30 <TIM_OC3_SetConfig+0xd0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d113      	bne.n	8004a0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	621a      	str	r2, [r3, #32]
}
 8004a24:	bf00      	nop
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40012c00 	.word	0x40012c00

08004a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	031b      	lsls	r3, r3, #12
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8004acc <TIM_OC4_SetConfig+0x98>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d109      	bne.n	8004aa8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	019b      	lsls	r3, r3, #6
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	40012c00 	.word	0x40012c00

08004ad0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f023 0201 	bic.w	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b70 <TIM_TI1_SetConfig+0xa0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_TI1_SetConfig+0x3e>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b04:	d003      	beq.n	8004b0e <TIM_TI1_SetConfig+0x3e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a1a      	ldr	r2, [pc, #104]	@ (8004b74 <TIM_TI1_SetConfig+0xa4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <TIM_TI1_SetConfig+0x42>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <TIM_TI1_SetConfig+0x44>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e003      	b.n	8004b32 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f023 030a 	bic.w	r3, r3, #10
 8004b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 030a 	and.w	r3, r3, #10
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400

08004b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f023 0201 	bic.w	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 030a 	bic.w	r3, r3, #10
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr

08004bd4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f023 0210 	bic.w	r2, r3, #16
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	031b      	lsls	r3, r3, #12
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f023 0210 	bic.w	r2, r3, #16
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	031b      	lsls	r3, r3, #12
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b087      	sub	sp, #28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	031b      	lsls	r3, r3, #12
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d72:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	031b      	lsls	r3, r3, #12
 8004d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f043 0307 	orr.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	609a      	str	r2, [r3, #8]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	021a      	lsls	r2, r3, #8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	609a      	str	r2, [r3, #8]
}
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1a      	ldr	r2, [r3, #32]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	401a      	ands	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	431a      	orrs	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e041      	b.n	8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb8:	d004      	beq.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a10      	ldr	r2, [pc, #64]	@ (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d10c      	bne.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40000400 	.word	0x40000400

08004f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr

08004f16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <siprintf>:
 8004f28:	b40e      	push	{r1, r2, r3}
 8004f2a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f2e:	b500      	push	{lr}
 8004f30:	b09c      	sub	sp, #112	@ 0x70
 8004f32:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f34:	9002      	str	r0, [sp, #8]
 8004f36:	9006      	str	r0, [sp, #24]
 8004f38:	9107      	str	r1, [sp, #28]
 8004f3a:	9104      	str	r1, [sp, #16]
 8004f3c:	4808      	ldr	r0, [pc, #32]	@ (8004f60 <siprintf+0x38>)
 8004f3e:	4909      	ldr	r1, [pc, #36]	@ (8004f64 <siprintf+0x3c>)
 8004f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f44:	9105      	str	r1, [sp, #20]
 8004f46:	6800      	ldr	r0, [r0, #0]
 8004f48:	a902      	add	r1, sp, #8
 8004f4a:	9301      	str	r3, [sp, #4]
 8004f4c:	f000 f992 	bl	8005274 <_svfiprintf_r>
 8004f50:	2200      	movs	r2, #0
 8004f52:	9b02      	ldr	r3, [sp, #8]
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	b01c      	add	sp, #112	@ 0x70
 8004f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f5c:	b003      	add	sp, #12
 8004f5e:	4770      	bx	lr
 8004f60:	2000000c 	.word	0x2000000c
 8004f64:	ffff0208 	.word	0xffff0208

08004f68 <memset>:
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4402      	add	r2, r0
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d100      	bne.n	8004f72 <memset+0xa>
 8004f70:	4770      	bx	lr
 8004f72:	f803 1b01 	strb.w	r1, [r3], #1
 8004f76:	e7f9      	b.n	8004f6c <memset+0x4>

08004f78 <__errno>:
 8004f78:	4b01      	ldr	r3, [pc, #4]	@ (8004f80 <__errno+0x8>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	2000000c 	.word	0x2000000c

08004f84 <__libc_init_array>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	2600      	movs	r6, #0
 8004f88:	4d0c      	ldr	r5, [pc, #48]	@ (8004fbc <__libc_init_array+0x38>)
 8004f8a:	4c0d      	ldr	r4, [pc, #52]	@ (8004fc0 <__libc_init_array+0x3c>)
 8004f8c:	1b64      	subs	r4, r4, r5
 8004f8e:	10a4      	asrs	r4, r4, #2
 8004f90:	42a6      	cmp	r6, r4
 8004f92:	d109      	bne.n	8004fa8 <__libc_init_array+0x24>
 8004f94:	f001 fdee 	bl	8006b74 <_init>
 8004f98:	2600      	movs	r6, #0
 8004f9a:	4d0a      	ldr	r5, [pc, #40]	@ (8004fc4 <__libc_init_array+0x40>)
 8004f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8004fc8 <__libc_init_array+0x44>)
 8004f9e:	1b64      	subs	r4, r4, r5
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	42a6      	cmp	r6, r4
 8004fa4:	d105      	bne.n	8004fb2 <__libc_init_array+0x2e>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fac:	4798      	blx	r3
 8004fae:	3601      	adds	r6, #1
 8004fb0:	e7ee      	b.n	8004f90 <__libc_init_array+0xc>
 8004fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb6:	4798      	blx	r3
 8004fb8:	3601      	adds	r6, #1
 8004fba:	e7f2      	b.n	8004fa2 <__libc_init_array+0x1e>
 8004fbc:	08006c60 	.word	0x08006c60
 8004fc0:	08006c60 	.word	0x08006c60
 8004fc4:	08006c60 	.word	0x08006c60
 8004fc8:	08006c64 	.word	0x08006c64

08004fcc <__retarget_lock_acquire_recursive>:
 8004fcc:	4770      	bx	lr

08004fce <__retarget_lock_release_recursive>:
 8004fce:	4770      	bx	lr

08004fd0 <_free_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	d040      	beq.n	800505a <_free_r+0x8a>
 8004fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fdc:	1f0c      	subs	r4, r1, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bfb8      	it	lt
 8004fe2:	18e4      	addlt	r4, r4, r3
 8004fe4:	f000 f8de 	bl	80051a4 <__malloc_lock>
 8004fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800505c <_free_r+0x8c>)
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	b933      	cbnz	r3, 8004ffc <_free_r+0x2c>
 8004fee:	6063      	str	r3, [r4, #4]
 8004ff0:	6014      	str	r4, [r2, #0]
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ff8:	f000 b8da 	b.w	80051b0 <__malloc_unlock>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d908      	bls.n	8005012 <_free_r+0x42>
 8005000:	6820      	ldr	r0, [r4, #0]
 8005002:	1821      	adds	r1, r4, r0
 8005004:	428b      	cmp	r3, r1
 8005006:	bf01      	itttt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	1809      	addeq	r1, r1, r0
 800500e:	6021      	streq	r1, [r4, #0]
 8005010:	e7ed      	b.n	8004fee <_free_r+0x1e>
 8005012:	461a      	mov	r2, r3
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b10b      	cbz	r3, 800501c <_free_r+0x4c>
 8005018:	42a3      	cmp	r3, r4
 800501a:	d9fa      	bls.n	8005012 <_free_r+0x42>
 800501c:	6811      	ldr	r1, [r2, #0]
 800501e:	1850      	adds	r0, r2, r1
 8005020:	42a0      	cmp	r0, r4
 8005022:	d10b      	bne.n	800503c <_free_r+0x6c>
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	4401      	add	r1, r0
 8005028:	1850      	adds	r0, r2, r1
 800502a:	4283      	cmp	r3, r0
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	d1e0      	bne.n	8004ff2 <_free_r+0x22>
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4408      	add	r0, r1
 8005036:	6010      	str	r0, [r2, #0]
 8005038:	6053      	str	r3, [r2, #4]
 800503a:	e7da      	b.n	8004ff2 <_free_r+0x22>
 800503c:	d902      	bls.n	8005044 <_free_r+0x74>
 800503e:	230c      	movs	r3, #12
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	e7d6      	b.n	8004ff2 <_free_r+0x22>
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	1821      	adds	r1, r4, r0
 8005048:	428b      	cmp	r3, r1
 800504a:	bf01      	itttt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	1809      	addeq	r1, r1, r0
 8005052:	6021      	streq	r1, [r4, #0]
 8005054:	6063      	str	r3, [r4, #4]
 8005056:	6054      	str	r4, [r2, #4]
 8005058:	e7cb      	b.n	8004ff2 <_free_r+0x22>
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	200002cc 	.word	0x200002cc

08005060 <sbrk_aligned>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4e0f      	ldr	r6, [pc, #60]	@ (80050a0 <sbrk_aligned+0x40>)
 8005064:	460c      	mov	r4, r1
 8005066:	6831      	ldr	r1, [r6, #0]
 8005068:	4605      	mov	r5, r0
 800506a:	b911      	cbnz	r1, 8005072 <sbrk_aligned+0x12>
 800506c:	f000 fbaa 	bl	80057c4 <_sbrk_r>
 8005070:	6030      	str	r0, [r6, #0]
 8005072:	4621      	mov	r1, r4
 8005074:	4628      	mov	r0, r5
 8005076:	f000 fba5 	bl	80057c4 <_sbrk_r>
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	d103      	bne.n	8005086 <sbrk_aligned+0x26>
 800507e:	f04f 34ff 	mov.w	r4, #4294967295
 8005082:	4620      	mov	r0, r4
 8005084:	bd70      	pop	{r4, r5, r6, pc}
 8005086:	1cc4      	adds	r4, r0, #3
 8005088:	f024 0403 	bic.w	r4, r4, #3
 800508c:	42a0      	cmp	r0, r4
 800508e:	d0f8      	beq.n	8005082 <sbrk_aligned+0x22>
 8005090:	1a21      	subs	r1, r4, r0
 8005092:	4628      	mov	r0, r5
 8005094:	f000 fb96 	bl	80057c4 <_sbrk_r>
 8005098:	3001      	adds	r0, #1
 800509a:	d1f2      	bne.n	8005082 <sbrk_aligned+0x22>
 800509c:	e7ef      	b.n	800507e <sbrk_aligned+0x1e>
 800509e:	bf00      	nop
 80050a0:	200002c8 	.word	0x200002c8

080050a4 <_malloc_r>:
 80050a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a8:	1ccd      	adds	r5, r1, #3
 80050aa:	f025 0503 	bic.w	r5, r5, #3
 80050ae:	3508      	adds	r5, #8
 80050b0:	2d0c      	cmp	r5, #12
 80050b2:	bf38      	it	cc
 80050b4:	250c      	movcc	r5, #12
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	4606      	mov	r6, r0
 80050ba:	db01      	blt.n	80050c0 <_malloc_r+0x1c>
 80050bc:	42a9      	cmp	r1, r5
 80050be:	d904      	bls.n	80050ca <_malloc_r+0x26>
 80050c0:	230c      	movs	r3, #12
 80050c2:	6033      	str	r3, [r6, #0]
 80050c4:	2000      	movs	r0, #0
 80050c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051a0 <_malloc_r+0xfc>
 80050ce:	f000 f869 	bl	80051a4 <__malloc_lock>
 80050d2:	f8d8 3000 	ldr.w	r3, [r8]
 80050d6:	461c      	mov	r4, r3
 80050d8:	bb44      	cbnz	r4, 800512c <_malloc_r+0x88>
 80050da:	4629      	mov	r1, r5
 80050dc:	4630      	mov	r0, r6
 80050de:	f7ff ffbf 	bl	8005060 <sbrk_aligned>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	4604      	mov	r4, r0
 80050e6:	d158      	bne.n	800519a <_malloc_r+0xf6>
 80050e8:	f8d8 4000 	ldr.w	r4, [r8]
 80050ec:	4627      	mov	r7, r4
 80050ee:	2f00      	cmp	r7, #0
 80050f0:	d143      	bne.n	800517a <_malloc_r+0xd6>
 80050f2:	2c00      	cmp	r4, #0
 80050f4:	d04b      	beq.n	800518e <_malloc_r+0xea>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	4639      	mov	r1, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	eb04 0903 	add.w	r9, r4, r3
 8005100:	f000 fb60 	bl	80057c4 <_sbrk_r>
 8005104:	4581      	cmp	r9, r0
 8005106:	d142      	bne.n	800518e <_malloc_r+0xea>
 8005108:	6821      	ldr	r1, [r4, #0]
 800510a:	4630      	mov	r0, r6
 800510c:	1a6d      	subs	r5, r5, r1
 800510e:	4629      	mov	r1, r5
 8005110:	f7ff ffa6 	bl	8005060 <sbrk_aligned>
 8005114:	3001      	adds	r0, #1
 8005116:	d03a      	beq.n	800518e <_malloc_r+0xea>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	442b      	add	r3, r5
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	f8d8 3000 	ldr.w	r3, [r8]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	bb62      	cbnz	r2, 8005180 <_malloc_r+0xdc>
 8005126:	f8c8 7000 	str.w	r7, [r8]
 800512a:	e00f      	b.n	800514c <_malloc_r+0xa8>
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	1b52      	subs	r2, r2, r5
 8005130:	d420      	bmi.n	8005174 <_malloc_r+0xd0>
 8005132:	2a0b      	cmp	r2, #11
 8005134:	d917      	bls.n	8005166 <_malloc_r+0xc2>
 8005136:	1961      	adds	r1, r4, r5
 8005138:	42a3      	cmp	r3, r4
 800513a:	6025      	str	r5, [r4, #0]
 800513c:	bf18      	it	ne
 800513e:	6059      	strne	r1, [r3, #4]
 8005140:	6863      	ldr	r3, [r4, #4]
 8005142:	bf08      	it	eq
 8005144:	f8c8 1000 	streq.w	r1, [r8]
 8005148:	5162      	str	r2, [r4, r5]
 800514a:	604b      	str	r3, [r1, #4]
 800514c:	4630      	mov	r0, r6
 800514e:	f000 f82f 	bl	80051b0 <__malloc_unlock>
 8005152:	f104 000b 	add.w	r0, r4, #11
 8005156:	1d23      	adds	r3, r4, #4
 8005158:	f020 0007 	bic.w	r0, r0, #7
 800515c:	1ac2      	subs	r2, r0, r3
 800515e:	bf1c      	itt	ne
 8005160:	1a1b      	subne	r3, r3, r0
 8005162:	50a3      	strne	r3, [r4, r2]
 8005164:	e7af      	b.n	80050c6 <_malloc_r+0x22>
 8005166:	6862      	ldr	r2, [r4, #4]
 8005168:	42a3      	cmp	r3, r4
 800516a:	bf0c      	ite	eq
 800516c:	f8c8 2000 	streq.w	r2, [r8]
 8005170:	605a      	strne	r2, [r3, #4]
 8005172:	e7eb      	b.n	800514c <_malloc_r+0xa8>
 8005174:	4623      	mov	r3, r4
 8005176:	6864      	ldr	r4, [r4, #4]
 8005178:	e7ae      	b.n	80050d8 <_malloc_r+0x34>
 800517a:	463c      	mov	r4, r7
 800517c:	687f      	ldr	r7, [r7, #4]
 800517e:	e7b6      	b.n	80050ee <_malloc_r+0x4a>
 8005180:	461a      	mov	r2, r3
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	42a3      	cmp	r3, r4
 8005186:	d1fb      	bne.n	8005180 <_malloc_r+0xdc>
 8005188:	2300      	movs	r3, #0
 800518a:	6053      	str	r3, [r2, #4]
 800518c:	e7de      	b.n	800514c <_malloc_r+0xa8>
 800518e:	230c      	movs	r3, #12
 8005190:	4630      	mov	r0, r6
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f000 f80c 	bl	80051b0 <__malloc_unlock>
 8005198:	e794      	b.n	80050c4 <_malloc_r+0x20>
 800519a:	6005      	str	r5, [r0, #0]
 800519c:	e7d6      	b.n	800514c <_malloc_r+0xa8>
 800519e:	bf00      	nop
 80051a0:	200002cc 	.word	0x200002cc

080051a4 <__malloc_lock>:
 80051a4:	4801      	ldr	r0, [pc, #4]	@ (80051ac <__malloc_lock+0x8>)
 80051a6:	f7ff bf11 	b.w	8004fcc <__retarget_lock_acquire_recursive>
 80051aa:	bf00      	nop
 80051ac:	200002c4 	.word	0x200002c4

080051b0 <__malloc_unlock>:
 80051b0:	4801      	ldr	r0, [pc, #4]	@ (80051b8 <__malloc_unlock+0x8>)
 80051b2:	f7ff bf0c 	b.w	8004fce <__retarget_lock_release_recursive>
 80051b6:	bf00      	nop
 80051b8:	200002c4 	.word	0x200002c4

080051bc <__ssputs_r>:
 80051bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	461f      	mov	r7, r3
 80051c2:	688e      	ldr	r6, [r1, #8]
 80051c4:	4682      	mov	sl, r0
 80051c6:	42be      	cmp	r6, r7
 80051c8:	460c      	mov	r4, r1
 80051ca:	4690      	mov	r8, r2
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	d82d      	bhi.n	800522c <__ssputs_r+0x70>
 80051d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051d8:	d026      	beq.n	8005228 <__ssputs_r+0x6c>
 80051da:	6965      	ldr	r5, [r4, #20]
 80051dc:	6909      	ldr	r1, [r1, #16]
 80051de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051e2:	eba3 0901 	sub.w	r9, r3, r1
 80051e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051ea:	1c7b      	adds	r3, r7, #1
 80051ec:	444b      	add	r3, r9
 80051ee:	106d      	asrs	r5, r5, #1
 80051f0:	429d      	cmp	r5, r3
 80051f2:	bf38      	it	cc
 80051f4:	461d      	movcc	r5, r3
 80051f6:	0553      	lsls	r3, r2, #21
 80051f8:	d527      	bpl.n	800524a <__ssputs_r+0x8e>
 80051fa:	4629      	mov	r1, r5
 80051fc:	f7ff ff52 	bl	80050a4 <_malloc_r>
 8005200:	4606      	mov	r6, r0
 8005202:	b360      	cbz	r0, 800525e <__ssputs_r+0xa2>
 8005204:	464a      	mov	r2, r9
 8005206:	6921      	ldr	r1, [r4, #16]
 8005208:	f000 fafa 	bl	8005800 <memcpy>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	6126      	str	r6, [r4, #16]
 800521a:	444e      	add	r6, r9
 800521c:	6026      	str	r6, [r4, #0]
 800521e:	463e      	mov	r6, r7
 8005220:	6165      	str	r5, [r4, #20]
 8005222:	eba5 0509 	sub.w	r5, r5, r9
 8005226:	60a5      	str	r5, [r4, #8]
 8005228:	42be      	cmp	r6, r7
 800522a:	d900      	bls.n	800522e <__ssputs_r+0x72>
 800522c:	463e      	mov	r6, r7
 800522e:	4632      	mov	r2, r6
 8005230:	4641      	mov	r1, r8
 8005232:	6820      	ldr	r0, [r4, #0]
 8005234:	f000 faac 	bl	8005790 <memmove>
 8005238:	2000      	movs	r0, #0
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	1b9b      	subs	r3, r3, r6
 800523e:	60a3      	str	r3, [r4, #8]
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	4433      	add	r3, r6
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524a:	462a      	mov	r2, r5
 800524c:	f000 fae6 	bl	800581c <_realloc_r>
 8005250:	4606      	mov	r6, r0
 8005252:	2800      	cmp	r0, #0
 8005254:	d1e0      	bne.n	8005218 <__ssputs_r+0x5c>
 8005256:	4650      	mov	r0, sl
 8005258:	6921      	ldr	r1, [r4, #16]
 800525a:	f7ff feb9 	bl	8004fd0 <_free_r>
 800525e:	230c      	movs	r3, #12
 8005260:	f8ca 3000 	str.w	r3, [sl]
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	f04f 30ff 	mov.w	r0, #4294967295
 800526a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800526e:	81a3      	strh	r3, [r4, #12]
 8005270:	e7e9      	b.n	8005246 <__ssputs_r+0x8a>
	...

08005274 <_svfiprintf_r>:
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	4698      	mov	r8, r3
 800527a:	898b      	ldrh	r3, [r1, #12]
 800527c:	4607      	mov	r7, r0
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	460d      	mov	r5, r1
 8005282:	4614      	mov	r4, r2
 8005284:	b09d      	sub	sp, #116	@ 0x74
 8005286:	d510      	bpl.n	80052aa <_svfiprintf_r+0x36>
 8005288:	690b      	ldr	r3, [r1, #16]
 800528a:	b973      	cbnz	r3, 80052aa <_svfiprintf_r+0x36>
 800528c:	2140      	movs	r1, #64	@ 0x40
 800528e:	f7ff ff09 	bl	80050a4 <_malloc_r>
 8005292:	6028      	str	r0, [r5, #0]
 8005294:	6128      	str	r0, [r5, #16]
 8005296:	b930      	cbnz	r0, 80052a6 <_svfiprintf_r+0x32>
 8005298:	230c      	movs	r3, #12
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	b01d      	add	sp, #116	@ 0x74
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	2340      	movs	r3, #64	@ 0x40
 80052a8:	616b      	str	r3, [r5, #20]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ae:	2320      	movs	r3, #32
 80052b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052b4:	2330      	movs	r3, #48	@ 0x30
 80052b6:	f04f 0901 	mov.w	r9, #1
 80052ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80052be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005458 <_svfiprintf_r+0x1e4>
 80052c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052c6:	4623      	mov	r3, r4
 80052c8:	469a      	mov	sl, r3
 80052ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ce:	b10a      	cbz	r2, 80052d4 <_svfiprintf_r+0x60>
 80052d0:	2a25      	cmp	r2, #37	@ 0x25
 80052d2:	d1f9      	bne.n	80052c8 <_svfiprintf_r+0x54>
 80052d4:	ebba 0b04 	subs.w	fp, sl, r4
 80052d8:	d00b      	beq.n	80052f2 <_svfiprintf_r+0x7e>
 80052da:	465b      	mov	r3, fp
 80052dc:	4622      	mov	r2, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	4638      	mov	r0, r7
 80052e2:	f7ff ff6b 	bl	80051bc <__ssputs_r>
 80052e6:	3001      	adds	r0, #1
 80052e8:	f000 80a7 	beq.w	800543a <_svfiprintf_r+0x1c6>
 80052ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052ee:	445a      	add	r2, fp
 80052f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80052f2:	f89a 3000 	ldrb.w	r3, [sl]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 809f 	beq.w	800543a <_svfiprintf_r+0x1c6>
 80052fc:	2300      	movs	r3, #0
 80052fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005306:	f10a 0a01 	add.w	sl, sl, #1
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	9307      	str	r3, [sp, #28]
 800530e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005312:	931a      	str	r3, [sp, #104]	@ 0x68
 8005314:	4654      	mov	r4, sl
 8005316:	2205      	movs	r2, #5
 8005318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800531c:	484e      	ldr	r0, [pc, #312]	@ (8005458 <_svfiprintf_r+0x1e4>)
 800531e:	f000 fa61 	bl	80057e4 <memchr>
 8005322:	9a04      	ldr	r2, [sp, #16]
 8005324:	b9d8      	cbnz	r0, 800535e <_svfiprintf_r+0xea>
 8005326:	06d0      	lsls	r0, r2, #27
 8005328:	bf44      	itt	mi
 800532a:	2320      	movmi	r3, #32
 800532c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005330:	0711      	lsls	r1, r2, #28
 8005332:	bf44      	itt	mi
 8005334:	232b      	movmi	r3, #43	@ 0x2b
 8005336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800533a:	f89a 3000 	ldrb.w	r3, [sl]
 800533e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005340:	d015      	beq.n	800536e <_svfiprintf_r+0xfa>
 8005342:	4654      	mov	r4, sl
 8005344:	2000      	movs	r0, #0
 8005346:	f04f 0c0a 	mov.w	ip, #10
 800534a:	9a07      	ldr	r2, [sp, #28]
 800534c:	4621      	mov	r1, r4
 800534e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005352:	3b30      	subs	r3, #48	@ 0x30
 8005354:	2b09      	cmp	r3, #9
 8005356:	d94b      	bls.n	80053f0 <_svfiprintf_r+0x17c>
 8005358:	b1b0      	cbz	r0, 8005388 <_svfiprintf_r+0x114>
 800535a:	9207      	str	r2, [sp, #28]
 800535c:	e014      	b.n	8005388 <_svfiprintf_r+0x114>
 800535e:	eba0 0308 	sub.w	r3, r0, r8
 8005362:	fa09 f303 	lsl.w	r3, r9, r3
 8005366:	4313      	orrs	r3, r2
 8005368:	46a2      	mov	sl, r4
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	e7d2      	b.n	8005314 <_svfiprintf_r+0xa0>
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	1d19      	adds	r1, r3, #4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	9103      	str	r1, [sp, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	bfbb      	ittet	lt
 800537a:	425b      	neglt	r3, r3
 800537c:	f042 0202 	orrlt.w	r2, r2, #2
 8005380:	9307      	strge	r3, [sp, #28]
 8005382:	9307      	strlt	r3, [sp, #28]
 8005384:	bfb8      	it	lt
 8005386:	9204      	strlt	r2, [sp, #16]
 8005388:	7823      	ldrb	r3, [r4, #0]
 800538a:	2b2e      	cmp	r3, #46	@ 0x2e
 800538c:	d10a      	bne.n	80053a4 <_svfiprintf_r+0x130>
 800538e:	7863      	ldrb	r3, [r4, #1]
 8005390:	2b2a      	cmp	r3, #42	@ 0x2a
 8005392:	d132      	bne.n	80053fa <_svfiprintf_r+0x186>
 8005394:	9b03      	ldr	r3, [sp, #12]
 8005396:	3402      	adds	r4, #2
 8005398:	1d1a      	adds	r2, r3, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	9203      	str	r2, [sp, #12]
 800539e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800545c <_svfiprintf_r+0x1e8>
 80053a8:	2203      	movs	r2, #3
 80053aa:	4650      	mov	r0, sl
 80053ac:	7821      	ldrb	r1, [r4, #0]
 80053ae:	f000 fa19 	bl	80057e4 <memchr>
 80053b2:	b138      	cbz	r0, 80053c4 <_svfiprintf_r+0x150>
 80053b4:	2240      	movs	r2, #64	@ 0x40
 80053b6:	9b04      	ldr	r3, [sp, #16]
 80053b8:	eba0 000a 	sub.w	r0, r0, sl
 80053bc:	4082      	lsls	r2, r0
 80053be:	4313      	orrs	r3, r2
 80053c0:	3401      	adds	r4, #1
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053c8:	2206      	movs	r2, #6
 80053ca:	4825      	ldr	r0, [pc, #148]	@ (8005460 <_svfiprintf_r+0x1ec>)
 80053cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053d0:	f000 fa08 	bl	80057e4 <memchr>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d036      	beq.n	8005446 <_svfiprintf_r+0x1d2>
 80053d8:	4b22      	ldr	r3, [pc, #136]	@ (8005464 <_svfiprintf_r+0x1f0>)
 80053da:	bb1b      	cbnz	r3, 8005424 <_svfiprintf_r+0x1b0>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	3307      	adds	r3, #7
 80053e0:	f023 0307 	bic.w	r3, r3, #7
 80053e4:	3308      	adds	r3, #8
 80053e6:	9303      	str	r3, [sp, #12]
 80053e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ea:	4433      	add	r3, r6
 80053ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ee:	e76a      	b.n	80052c6 <_svfiprintf_r+0x52>
 80053f0:	460c      	mov	r4, r1
 80053f2:	2001      	movs	r0, #1
 80053f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80053f8:	e7a8      	b.n	800534c <_svfiprintf_r+0xd8>
 80053fa:	2300      	movs	r3, #0
 80053fc:	f04f 0c0a 	mov.w	ip, #10
 8005400:	4619      	mov	r1, r3
 8005402:	3401      	adds	r4, #1
 8005404:	9305      	str	r3, [sp, #20]
 8005406:	4620      	mov	r0, r4
 8005408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800540c:	3a30      	subs	r2, #48	@ 0x30
 800540e:	2a09      	cmp	r2, #9
 8005410:	d903      	bls.n	800541a <_svfiprintf_r+0x1a6>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0c6      	beq.n	80053a4 <_svfiprintf_r+0x130>
 8005416:	9105      	str	r1, [sp, #20]
 8005418:	e7c4      	b.n	80053a4 <_svfiprintf_r+0x130>
 800541a:	4604      	mov	r4, r0
 800541c:	2301      	movs	r3, #1
 800541e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005422:	e7f0      	b.n	8005406 <_svfiprintf_r+0x192>
 8005424:	ab03      	add	r3, sp, #12
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	462a      	mov	r2, r5
 800542a:	4638      	mov	r0, r7
 800542c:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <_svfiprintf_r+0x1f4>)
 800542e:	a904      	add	r1, sp, #16
 8005430:	f3af 8000 	nop.w
 8005434:	1c42      	adds	r2, r0, #1
 8005436:	4606      	mov	r6, r0
 8005438:	d1d6      	bne.n	80053e8 <_svfiprintf_r+0x174>
 800543a:	89ab      	ldrh	r3, [r5, #12]
 800543c:	065b      	lsls	r3, r3, #25
 800543e:	f53f af2d 	bmi.w	800529c <_svfiprintf_r+0x28>
 8005442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005444:	e72c      	b.n	80052a0 <_svfiprintf_r+0x2c>
 8005446:	ab03      	add	r3, sp, #12
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	462a      	mov	r2, r5
 800544c:	4638      	mov	r0, r7
 800544e:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <_svfiprintf_r+0x1f4>)
 8005450:	a904      	add	r1, sp, #16
 8005452:	f000 f87d 	bl	8005550 <_printf_i>
 8005456:	e7ed      	b.n	8005434 <_svfiprintf_r+0x1c0>
 8005458:	08006bfa 	.word	0x08006bfa
 800545c:	08006c00 	.word	0x08006c00
 8005460:	08006c04 	.word	0x08006c04
 8005464:	00000000 	.word	0x00000000
 8005468:	080051bd 	.word	0x080051bd

0800546c <_printf_common>:
 800546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005470:	4616      	mov	r6, r2
 8005472:	4698      	mov	r8, r3
 8005474:	688a      	ldr	r2, [r1, #8]
 8005476:	690b      	ldr	r3, [r1, #16]
 8005478:	4607      	mov	r7, r0
 800547a:	4293      	cmp	r3, r2
 800547c:	bfb8      	it	lt
 800547e:	4613      	movlt	r3, r2
 8005480:	6033      	str	r3, [r6, #0]
 8005482:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005486:	460c      	mov	r4, r1
 8005488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800548c:	b10a      	cbz	r2, 8005492 <_printf_common+0x26>
 800548e:	3301      	adds	r3, #1
 8005490:	6033      	str	r3, [r6, #0]
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	0699      	lsls	r1, r3, #26
 8005496:	bf42      	ittt	mi
 8005498:	6833      	ldrmi	r3, [r6, #0]
 800549a:	3302      	addmi	r3, #2
 800549c:	6033      	strmi	r3, [r6, #0]
 800549e:	6825      	ldr	r5, [r4, #0]
 80054a0:	f015 0506 	ands.w	r5, r5, #6
 80054a4:	d106      	bne.n	80054b4 <_printf_common+0x48>
 80054a6:	f104 0a19 	add.w	sl, r4, #25
 80054aa:	68e3      	ldr	r3, [r4, #12]
 80054ac:	6832      	ldr	r2, [r6, #0]
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	42ab      	cmp	r3, r5
 80054b2:	dc2b      	bgt.n	800550c <_printf_common+0xa0>
 80054b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	3b00      	subs	r3, #0
 80054bc:	bf18      	it	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	0692      	lsls	r2, r2, #26
 80054c2:	d430      	bmi.n	8005526 <_printf_common+0xba>
 80054c4:	4641      	mov	r1, r8
 80054c6:	4638      	mov	r0, r7
 80054c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054cc:	47c8      	blx	r9
 80054ce:	3001      	adds	r0, #1
 80054d0:	d023      	beq.n	800551a <_printf_common+0xae>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	6922      	ldr	r2, [r4, #16]
 80054d6:	f003 0306 	and.w	r3, r3, #6
 80054da:	2b04      	cmp	r3, #4
 80054dc:	bf14      	ite	ne
 80054de:	2500      	movne	r5, #0
 80054e0:	6833      	ldreq	r3, [r6, #0]
 80054e2:	f04f 0600 	mov.w	r6, #0
 80054e6:	bf08      	it	eq
 80054e8:	68e5      	ldreq	r5, [r4, #12]
 80054ea:	f104 041a 	add.w	r4, r4, #26
 80054ee:	bf08      	it	eq
 80054f0:	1aed      	subeq	r5, r5, r3
 80054f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80054f6:	bf08      	it	eq
 80054f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054fc:	4293      	cmp	r3, r2
 80054fe:	bfc4      	itt	gt
 8005500:	1a9b      	subgt	r3, r3, r2
 8005502:	18ed      	addgt	r5, r5, r3
 8005504:	42b5      	cmp	r5, r6
 8005506:	d11a      	bne.n	800553e <_printf_common+0xd2>
 8005508:	2000      	movs	r0, #0
 800550a:	e008      	b.n	800551e <_printf_common+0xb2>
 800550c:	2301      	movs	r3, #1
 800550e:	4652      	mov	r2, sl
 8005510:	4641      	mov	r1, r8
 8005512:	4638      	mov	r0, r7
 8005514:	47c8      	blx	r9
 8005516:	3001      	adds	r0, #1
 8005518:	d103      	bne.n	8005522 <_printf_common+0xb6>
 800551a:	f04f 30ff 	mov.w	r0, #4294967295
 800551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005522:	3501      	adds	r5, #1
 8005524:	e7c1      	b.n	80054aa <_printf_common+0x3e>
 8005526:	2030      	movs	r0, #48	@ 0x30
 8005528:	18e1      	adds	r1, r4, r3
 800552a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005534:	4422      	add	r2, r4
 8005536:	3302      	adds	r3, #2
 8005538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800553c:	e7c2      	b.n	80054c4 <_printf_common+0x58>
 800553e:	2301      	movs	r3, #1
 8005540:	4622      	mov	r2, r4
 8005542:	4641      	mov	r1, r8
 8005544:	4638      	mov	r0, r7
 8005546:	47c8      	blx	r9
 8005548:	3001      	adds	r0, #1
 800554a:	d0e6      	beq.n	800551a <_printf_common+0xae>
 800554c:	3601      	adds	r6, #1
 800554e:	e7d9      	b.n	8005504 <_printf_common+0x98>

08005550 <_printf_i>:
 8005550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	7e0f      	ldrb	r7, [r1, #24]
 8005556:	4691      	mov	r9, r2
 8005558:	2f78      	cmp	r7, #120	@ 0x78
 800555a:	4680      	mov	r8, r0
 800555c:	460c      	mov	r4, r1
 800555e:	469a      	mov	sl, r3
 8005560:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005562:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005566:	d807      	bhi.n	8005578 <_printf_i+0x28>
 8005568:	2f62      	cmp	r7, #98	@ 0x62
 800556a:	d80a      	bhi.n	8005582 <_printf_i+0x32>
 800556c:	2f00      	cmp	r7, #0
 800556e:	f000 80d3 	beq.w	8005718 <_printf_i+0x1c8>
 8005572:	2f58      	cmp	r7, #88	@ 0x58
 8005574:	f000 80ba 	beq.w	80056ec <_printf_i+0x19c>
 8005578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800557c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005580:	e03a      	b.n	80055f8 <_printf_i+0xa8>
 8005582:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005586:	2b15      	cmp	r3, #21
 8005588:	d8f6      	bhi.n	8005578 <_printf_i+0x28>
 800558a:	a101      	add	r1, pc, #4	@ (adr r1, 8005590 <_printf_i+0x40>)
 800558c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005590:	080055e9 	.word	0x080055e9
 8005594:	080055fd 	.word	0x080055fd
 8005598:	08005579 	.word	0x08005579
 800559c:	08005579 	.word	0x08005579
 80055a0:	08005579 	.word	0x08005579
 80055a4:	08005579 	.word	0x08005579
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	08005579 	.word	0x08005579
 80055b0:	08005579 	.word	0x08005579
 80055b4:	08005579 	.word	0x08005579
 80055b8:	08005579 	.word	0x08005579
 80055bc:	080056ff 	.word	0x080056ff
 80055c0:	08005627 	.word	0x08005627
 80055c4:	080056b9 	.word	0x080056b9
 80055c8:	08005579 	.word	0x08005579
 80055cc:	08005579 	.word	0x08005579
 80055d0:	08005721 	.word	0x08005721
 80055d4:	08005579 	.word	0x08005579
 80055d8:	08005627 	.word	0x08005627
 80055dc:	08005579 	.word	0x08005579
 80055e0:	08005579 	.word	0x08005579
 80055e4:	080056c1 	.word	0x080056c1
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6032      	str	r2, [r6, #0]
 80055f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055f8:	2301      	movs	r3, #1
 80055fa:	e09e      	b.n	800573a <_printf_i+0x1ea>
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	1d19      	adds	r1, r3, #4
 8005602:	6031      	str	r1, [r6, #0]
 8005604:	0606      	lsls	r6, r0, #24
 8005606:	d501      	bpl.n	800560c <_printf_i+0xbc>
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	e003      	b.n	8005614 <_printf_i+0xc4>
 800560c:	0645      	lsls	r5, r0, #25
 800560e:	d5fb      	bpl.n	8005608 <_printf_i+0xb8>
 8005610:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005614:	2d00      	cmp	r5, #0
 8005616:	da03      	bge.n	8005620 <_printf_i+0xd0>
 8005618:	232d      	movs	r3, #45	@ 0x2d
 800561a:	426d      	negs	r5, r5
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005620:	230a      	movs	r3, #10
 8005622:	4859      	ldr	r0, [pc, #356]	@ (8005788 <_printf_i+0x238>)
 8005624:	e011      	b.n	800564a <_printf_i+0xfa>
 8005626:	6821      	ldr	r1, [r4, #0]
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	0608      	lsls	r0, r1, #24
 800562c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005630:	d402      	bmi.n	8005638 <_printf_i+0xe8>
 8005632:	0649      	lsls	r1, r1, #25
 8005634:	bf48      	it	mi
 8005636:	b2ad      	uxthmi	r5, r5
 8005638:	2f6f      	cmp	r7, #111	@ 0x6f
 800563a:	6033      	str	r3, [r6, #0]
 800563c:	bf14      	ite	ne
 800563e:	230a      	movne	r3, #10
 8005640:	2308      	moveq	r3, #8
 8005642:	4851      	ldr	r0, [pc, #324]	@ (8005788 <_printf_i+0x238>)
 8005644:	2100      	movs	r1, #0
 8005646:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800564a:	6866      	ldr	r6, [r4, #4]
 800564c:	2e00      	cmp	r6, #0
 800564e:	bfa8      	it	ge
 8005650:	6821      	ldrge	r1, [r4, #0]
 8005652:	60a6      	str	r6, [r4, #8]
 8005654:	bfa4      	itt	ge
 8005656:	f021 0104 	bicge.w	r1, r1, #4
 800565a:	6021      	strge	r1, [r4, #0]
 800565c:	b90d      	cbnz	r5, 8005662 <_printf_i+0x112>
 800565e:	2e00      	cmp	r6, #0
 8005660:	d04b      	beq.n	80056fa <_printf_i+0x1aa>
 8005662:	4616      	mov	r6, r2
 8005664:	fbb5 f1f3 	udiv	r1, r5, r3
 8005668:	fb03 5711 	mls	r7, r3, r1, r5
 800566c:	5dc7      	ldrb	r7, [r0, r7]
 800566e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005672:	462f      	mov	r7, r5
 8005674:	42bb      	cmp	r3, r7
 8005676:	460d      	mov	r5, r1
 8005678:	d9f4      	bls.n	8005664 <_printf_i+0x114>
 800567a:	2b08      	cmp	r3, #8
 800567c:	d10b      	bne.n	8005696 <_printf_i+0x146>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	07df      	lsls	r7, r3, #31
 8005682:	d508      	bpl.n	8005696 <_printf_i+0x146>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	6861      	ldr	r1, [r4, #4]
 8005688:	4299      	cmp	r1, r3
 800568a:	bfde      	ittt	le
 800568c:	2330      	movle	r3, #48	@ 0x30
 800568e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005692:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005696:	1b92      	subs	r2, r2, r6
 8005698:	6122      	str	r2, [r4, #16]
 800569a:	464b      	mov	r3, r9
 800569c:	4621      	mov	r1, r4
 800569e:	4640      	mov	r0, r8
 80056a0:	f8cd a000 	str.w	sl, [sp]
 80056a4:	aa03      	add	r2, sp, #12
 80056a6:	f7ff fee1 	bl	800546c <_printf_common>
 80056aa:	3001      	adds	r0, #1
 80056ac:	d14a      	bne.n	8005744 <_printf_i+0x1f4>
 80056ae:	f04f 30ff 	mov.w	r0, #4294967295
 80056b2:	b004      	add	sp, #16
 80056b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	f043 0320 	orr.w	r3, r3, #32
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	2778      	movs	r7, #120	@ 0x78
 80056c2:	4832      	ldr	r0, [pc, #200]	@ (800578c <_printf_i+0x23c>)
 80056c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	6831      	ldr	r1, [r6, #0]
 80056cc:	061f      	lsls	r7, r3, #24
 80056ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80056d2:	d402      	bmi.n	80056da <_printf_i+0x18a>
 80056d4:	065f      	lsls	r7, r3, #25
 80056d6:	bf48      	it	mi
 80056d8:	b2ad      	uxthmi	r5, r5
 80056da:	6031      	str	r1, [r6, #0]
 80056dc:	07d9      	lsls	r1, r3, #31
 80056de:	bf44      	itt	mi
 80056e0:	f043 0320 	orrmi.w	r3, r3, #32
 80056e4:	6023      	strmi	r3, [r4, #0]
 80056e6:	b11d      	cbz	r5, 80056f0 <_printf_i+0x1a0>
 80056e8:	2310      	movs	r3, #16
 80056ea:	e7ab      	b.n	8005644 <_printf_i+0xf4>
 80056ec:	4826      	ldr	r0, [pc, #152]	@ (8005788 <_printf_i+0x238>)
 80056ee:	e7e9      	b.n	80056c4 <_printf_i+0x174>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	f023 0320 	bic.w	r3, r3, #32
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	e7f6      	b.n	80056e8 <_printf_i+0x198>
 80056fa:	4616      	mov	r6, r2
 80056fc:	e7bd      	b.n	800567a <_printf_i+0x12a>
 80056fe:	6833      	ldr	r3, [r6, #0]
 8005700:	6825      	ldr	r5, [r4, #0]
 8005702:	1d18      	adds	r0, r3, #4
 8005704:	6961      	ldr	r1, [r4, #20]
 8005706:	6030      	str	r0, [r6, #0]
 8005708:	062e      	lsls	r6, r5, #24
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	d501      	bpl.n	8005712 <_printf_i+0x1c2>
 800570e:	6019      	str	r1, [r3, #0]
 8005710:	e002      	b.n	8005718 <_printf_i+0x1c8>
 8005712:	0668      	lsls	r0, r5, #25
 8005714:	d5fb      	bpl.n	800570e <_printf_i+0x1be>
 8005716:	8019      	strh	r1, [r3, #0]
 8005718:	2300      	movs	r3, #0
 800571a:	4616      	mov	r6, r2
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	e7bc      	b.n	800569a <_printf_i+0x14a>
 8005720:	6833      	ldr	r3, [r6, #0]
 8005722:	2100      	movs	r1, #0
 8005724:	1d1a      	adds	r2, r3, #4
 8005726:	6032      	str	r2, [r6, #0]
 8005728:	681e      	ldr	r6, [r3, #0]
 800572a:	6862      	ldr	r2, [r4, #4]
 800572c:	4630      	mov	r0, r6
 800572e:	f000 f859 	bl	80057e4 <memchr>
 8005732:	b108      	cbz	r0, 8005738 <_printf_i+0x1e8>
 8005734:	1b80      	subs	r0, r0, r6
 8005736:	6060      	str	r0, [r4, #4]
 8005738:	6863      	ldr	r3, [r4, #4]
 800573a:	6123      	str	r3, [r4, #16]
 800573c:	2300      	movs	r3, #0
 800573e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005742:	e7aa      	b.n	800569a <_printf_i+0x14a>
 8005744:	4632      	mov	r2, r6
 8005746:	4649      	mov	r1, r9
 8005748:	4640      	mov	r0, r8
 800574a:	6923      	ldr	r3, [r4, #16]
 800574c:	47d0      	blx	sl
 800574e:	3001      	adds	r0, #1
 8005750:	d0ad      	beq.n	80056ae <_printf_i+0x15e>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	079b      	lsls	r3, r3, #30
 8005756:	d413      	bmi.n	8005780 <_printf_i+0x230>
 8005758:	68e0      	ldr	r0, [r4, #12]
 800575a:	9b03      	ldr	r3, [sp, #12]
 800575c:	4298      	cmp	r0, r3
 800575e:	bfb8      	it	lt
 8005760:	4618      	movlt	r0, r3
 8005762:	e7a6      	b.n	80056b2 <_printf_i+0x162>
 8005764:	2301      	movs	r3, #1
 8005766:	4632      	mov	r2, r6
 8005768:	4649      	mov	r1, r9
 800576a:	4640      	mov	r0, r8
 800576c:	47d0      	blx	sl
 800576e:	3001      	adds	r0, #1
 8005770:	d09d      	beq.n	80056ae <_printf_i+0x15e>
 8005772:	3501      	adds	r5, #1
 8005774:	68e3      	ldr	r3, [r4, #12]
 8005776:	9903      	ldr	r1, [sp, #12]
 8005778:	1a5b      	subs	r3, r3, r1
 800577a:	42ab      	cmp	r3, r5
 800577c:	dcf2      	bgt.n	8005764 <_printf_i+0x214>
 800577e:	e7eb      	b.n	8005758 <_printf_i+0x208>
 8005780:	2500      	movs	r5, #0
 8005782:	f104 0619 	add.w	r6, r4, #25
 8005786:	e7f5      	b.n	8005774 <_printf_i+0x224>
 8005788:	08006c0b 	.word	0x08006c0b
 800578c:	08006c1c 	.word	0x08006c1c

08005790 <memmove>:
 8005790:	4288      	cmp	r0, r1
 8005792:	b510      	push	{r4, lr}
 8005794:	eb01 0402 	add.w	r4, r1, r2
 8005798:	d902      	bls.n	80057a0 <memmove+0x10>
 800579a:	4284      	cmp	r4, r0
 800579c:	4623      	mov	r3, r4
 800579e:	d807      	bhi.n	80057b0 <memmove+0x20>
 80057a0:	1e43      	subs	r3, r0, #1
 80057a2:	42a1      	cmp	r1, r4
 80057a4:	d008      	beq.n	80057b8 <memmove+0x28>
 80057a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ae:	e7f8      	b.n	80057a2 <memmove+0x12>
 80057b0:	4601      	mov	r1, r0
 80057b2:	4402      	add	r2, r0
 80057b4:	428a      	cmp	r2, r1
 80057b6:	d100      	bne.n	80057ba <memmove+0x2a>
 80057b8:	bd10      	pop	{r4, pc}
 80057ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057c2:	e7f7      	b.n	80057b4 <memmove+0x24>

080057c4 <_sbrk_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	2300      	movs	r3, #0
 80057c8:	4d05      	ldr	r5, [pc, #20]	@ (80057e0 <_sbrk_r+0x1c>)
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f7fc fbe4 	bl	8001f9c <_sbrk>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_sbrk_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_sbrk_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	200002c0 	.word	0x200002c0

080057e4 <memchr>:
 80057e4:	4603      	mov	r3, r0
 80057e6:	b510      	push	{r4, lr}
 80057e8:	b2c9      	uxtb	r1, r1
 80057ea:	4402      	add	r2, r0
 80057ec:	4293      	cmp	r3, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	d101      	bne.n	80057f6 <memchr+0x12>
 80057f2:	2000      	movs	r0, #0
 80057f4:	e003      	b.n	80057fe <memchr+0x1a>
 80057f6:	7804      	ldrb	r4, [r0, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	428c      	cmp	r4, r1
 80057fc:	d1f6      	bne.n	80057ec <memchr+0x8>
 80057fe:	bd10      	pop	{r4, pc}

08005800 <memcpy>:
 8005800:	440a      	add	r2, r1
 8005802:	4291      	cmp	r1, r2
 8005804:	f100 33ff 	add.w	r3, r0, #4294967295
 8005808:	d100      	bne.n	800580c <memcpy+0xc>
 800580a:	4770      	bx	lr
 800580c:	b510      	push	{r4, lr}
 800580e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005812:	4291      	cmp	r1, r2
 8005814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005818:	d1f9      	bne.n	800580e <memcpy+0xe>
 800581a:	bd10      	pop	{r4, pc}

0800581c <_realloc_r>:
 800581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005820:	4680      	mov	r8, r0
 8005822:	4615      	mov	r5, r2
 8005824:	460c      	mov	r4, r1
 8005826:	b921      	cbnz	r1, 8005832 <_realloc_r+0x16>
 8005828:	4611      	mov	r1, r2
 800582a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800582e:	f7ff bc39 	b.w	80050a4 <_malloc_r>
 8005832:	b92a      	cbnz	r2, 8005840 <_realloc_r+0x24>
 8005834:	f7ff fbcc 	bl	8004fd0 <_free_r>
 8005838:	2400      	movs	r4, #0
 800583a:	4620      	mov	r0, r4
 800583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005840:	f000 f81a 	bl	8005878 <_malloc_usable_size_r>
 8005844:	4285      	cmp	r5, r0
 8005846:	4606      	mov	r6, r0
 8005848:	d802      	bhi.n	8005850 <_realloc_r+0x34>
 800584a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800584e:	d8f4      	bhi.n	800583a <_realloc_r+0x1e>
 8005850:	4629      	mov	r1, r5
 8005852:	4640      	mov	r0, r8
 8005854:	f7ff fc26 	bl	80050a4 <_malloc_r>
 8005858:	4607      	mov	r7, r0
 800585a:	2800      	cmp	r0, #0
 800585c:	d0ec      	beq.n	8005838 <_realloc_r+0x1c>
 800585e:	42b5      	cmp	r5, r6
 8005860:	462a      	mov	r2, r5
 8005862:	4621      	mov	r1, r4
 8005864:	bf28      	it	cs
 8005866:	4632      	movcs	r2, r6
 8005868:	f7ff ffca 	bl	8005800 <memcpy>
 800586c:	4621      	mov	r1, r4
 800586e:	4640      	mov	r0, r8
 8005870:	f7ff fbae 	bl	8004fd0 <_free_r>
 8005874:	463c      	mov	r4, r7
 8005876:	e7e0      	b.n	800583a <_realloc_r+0x1e>

08005878 <_malloc_usable_size_r>:
 8005878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587c:	1f18      	subs	r0, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfbc      	itt	lt
 8005882:	580b      	ldrlt	r3, [r1, r0]
 8005884:	18c0      	addlt	r0, r0, r3
 8005886:	4770      	bx	lr

08005888 <log10>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	4604      	mov	r4, r0
 800588c:	460d      	mov	r5, r1
 800588e:	f000 f8a3 	bl	80059d8 <__ieee754_log10>
 8005892:	4622      	mov	r2, r4
 8005894:	4606      	mov	r6, r0
 8005896:	460f      	mov	r7, r1
 8005898:	462b      	mov	r3, r5
 800589a:	4620      	mov	r0, r4
 800589c:	4629      	mov	r1, r5
 800589e:	f7fb f8ad 	bl	80009fc <__aeabi_dcmpun>
 80058a2:	b998      	cbnz	r0, 80058cc <log10+0x44>
 80058a4:	2200      	movs	r2, #0
 80058a6:	2300      	movs	r3, #0
 80058a8:	4620      	mov	r0, r4
 80058aa:	4629      	mov	r1, r5
 80058ac:	f7fb f888 	bl	80009c0 <__aeabi_dcmple>
 80058b0:	b160      	cbz	r0, 80058cc <log10+0x44>
 80058b2:	2200      	movs	r2, #0
 80058b4:	2300      	movs	r3, #0
 80058b6:	4620      	mov	r0, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fb f86d 	bl	8000998 <__aeabi_dcmpeq>
 80058be:	b140      	cbz	r0, 80058d2 <log10+0x4a>
 80058c0:	f7ff fb5a 	bl	8004f78 <__errno>
 80058c4:	2322      	movs	r3, #34	@ 0x22
 80058c6:	2600      	movs	r6, #0
 80058c8:	4f06      	ldr	r7, [pc, #24]	@ (80058e4 <log10+0x5c>)
 80058ca:	6003      	str	r3, [r0, #0]
 80058cc:	4630      	mov	r0, r6
 80058ce:	4639      	mov	r1, r7
 80058d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d2:	f7ff fb51 	bl	8004f78 <__errno>
 80058d6:	2321      	movs	r3, #33	@ 0x21
 80058d8:	6003      	str	r3, [r0, #0]
 80058da:	4803      	ldr	r0, [pc, #12]	@ (80058e8 <log10+0x60>)
 80058dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058e0:	f000 b872 	b.w	80059c8 <nan>
 80058e4:	fff00000 	.word	0xfff00000
 80058e8:	08006bff 	.word	0x08006bff

080058ec <pow>:
 80058ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f0:	4614      	mov	r4, r2
 80058f2:	461d      	mov	r5, r3
 80058f4:	4680      	mov	r8, r0
 80058f6:	4689      	mov	r9, r1
 80058f8:	f000 f8ea 	bl	8005ad0 <__ieee754_pow>
 80058fc:	4622      	mov	r2, r4
 80058fe:	4606      	mov	r6, r0
 8005900:	460f      	mov	r7, r1
 8005902:	462b      	mov	r3, r5
 8005904:	4620      	mov	r0, r4
 8005906:	4629      	mov	r1, r5
 8005908:	f7fb f878 	bl	80009fc <__aeabi_dcmpun>
 800590c:	bbc8      	cbnz	r0, 8005982 <pow+0x96>
 800590e:	2200      	movs	r2, #0
 8005910:	2300      	movs	r3, #0
 8005912:	4640      	mov	r0, r8
 8005914:	4649      	mov	r1, r9
 8005916:	f7fb f83f 	bl	8000998 <__aeabi_dcmpeq>
 800591a:	b1b8      	cbz	r0, 800594c <pow+0x60>
 800591c:	2200      	movs	r2, #0
 800591e:	2300      	movs	r3, #0
 8005920:	4620      	mov	r0, r4
 8005922:	4629      	mov	r1, r5
 8005924:	f7fb f838 	bl	8000998 <__aeabi_dcmpeq>
 8005928:	2800      	cmp	r0, #0
 800592a:	d141      	bne.n	80059b0 <pow+0xc4>
 800592c:	4620      	mov	r0, r4
 800592e:	4629      	mov	r1, r5
 8005930:	f000 f844 	bl	80059bc <finite>
 8005934:	b328      	cbz	r0, 8005982 <pow+0x96>
 8005936:	2200      	movs	r2, #0
 8005938:	2300      	movs	r3, #0
 800593a:	4620      	mov	r0, r4
 800593c:	4629      	mov	r1, r5
 800593e:	f7fb f835 	bl	80009ac <__aeabi_dcmplt>
 8005942:	b1f0      	cbz	r0, 8005982 <pow+0x96>
 8005944:	f7ff fb18 	bl	8004f78 <__errno>
 8005948:	2322      	movs	r3, #34	@ 0x22
 800594a:	e019      	b.n	8005980 <pow+0x94>
 800594c:	4630      	mov	r0, r6
 800594e:	4639      	mov	r1, r7
 8005950:	f000 f834 	bl	80059bc <finite>
 8005954:	b9c8      	cbnz	r0, 800598a <pow+0x9e>
 8005956:	4640      	mov	r0, r8
 8005958:	4649      	mov	r1, r9
 800595a:	f000 f82f 	bl	80059bc <finite>
 800595e:	b1a0      	cbz	r0, 800598a <pow+0x9e>
 8005960:	4620      	mov	r0, r4
 8005962:	4629      	mov	r1, r5
 8005964:	f000 f82a 	bl	80059bc <finite>
 8005968:	b178      	cbz	r0, 800598a <pow+0x9e>
 800596a:	4632      	mov	r2, r6
 800596c:	463b      	mov	r3, r7
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	f7fb f843 	bl	80009fc <__aeabi_dcmpun>
 8005976:	2800      	cmp	r0, #0
 8005978:	d0e4      	beq.n	8005944 <pow+0x58>
 800597a:	f7ff fafd 	bl	8004f78 <__errno>
 800597e:	2321      	movs	r3, #33	@ 0x21
 8005980:	6003      	str	r3, [r0, #0]
 8005982:	4630      	mov	r0, r6
 8005984:	4639      	mov	r1, r7
 8005986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598a:	2200      	movs	r2, #0
 800598c:	2300      	movs	r3, #0
 800598e:	4630      	mov	r0, r6
 8005990:	4639      	mov	r1, r7
 8005992:	f7fb f801 	bl	8000998 <__aeabi_dcmpeq>
 8005996:	2800      	cmp	r0, #0
 8005998:	d0f3      	beq.n	8005982 <pow+0x96>
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f000 f80d 	bl	80059bc <finite>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d0ed      	beq.n	8005982 <pow+0x96>
 80059a6:	4620      	mov	r0, r4
 80059a8:	4629      	mov	r1, r5
 80059aa:	f000 f807 	bl	80059bc <finite>
 80059ae:	e7c8      	b.n	8005942 <pow+0x56>
 80059b0:	2600      	movs	r6, #0
 80059b2:	4f01      	ldr	r7, [pc, #4]	@ (80059b8 <pow+0xcc>)
 80059b4:	e7e5      	b.n	8005982 <pow+0x96>
 80059b6:	bf00      	nop
 80059b8:	3ff00000 	.word	0x3ff00000

080059bc <finite>:
 80059bc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80059c0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80059c4:	0fc0      	lsrs	r0, r0, #31
 80059c6:	4770      	bx	lr

080059c8 <nan>:
 80059c8:	2000      	movs	r0, #0
 80059ca:	4901      	ldr	r1, [pc, #4]	@ (80059d0 <nan+0x8>)
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	7ff80000 	.word	0x7ff80000
 80059d4:	00000000 	.word	0x00000000

080059d8 <__ieee754_log10>:
 80059d8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80059dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	460b      	mov	r3, r1
 80059e6:	da26      	bge.n	8005a36 <__ieee754_log10+0x5e>
 80059e8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80059ec:	4302      	orrs	r2, r0
 80059ee:	d107      	bne.n	8005a00 <__ieee754_log10+0x28>
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	2000      	movs	r0, #0
 80059f6:	4932      	ldr	r1, [pc, #200]	@ (8005ac0 <__ieee754_log10+0xe8>)
 80059f8:	f7fa fe90 	bl	800071c <__aeabi_ddiv>
 80059fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a00:	2900      	cmp	r1, #0
 8005a02:	da05      	bge.n	8005a10 <__ieee754_log10+0x38>
 8005a04:	4602      	mov	r2, r0
 8005a06:	f7fa fba7 	bl	8000158 <__aeabi_dsub>
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e7f3      	b.n	80059f8 <__ieee754_log10+0x20>
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac4 <__ieee754_log10+0xec>)
 8005a14:	f7fa fd58 	bl	80004c8 <__aeabi_dmul>
 8005a18:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	460d      	mov	r5, r1
 8005a20:	460b      	mov	r3, r1
 8005a22:	4929      	ldr	r1, [pc, #164]	@ (8005ac8 <__ieee754_log10+0xf0>)
 8005a24:	428b      	cmp	r3, r1
 8005a26:	dd08      	ble.n	8005a3a <__ieee754_log10+0x62>
 8005a28:	4622      	mov	r2, r4
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f7fa fb94 	bl	800015c <__adddf3>
 8005a34:	e7e2      	b.n	80059fc <__ieee754_log10+0x24>
 8005a36:	2200      	movs	r2, #0
 8005a38:	e7f3      	b.n	8005a22 <__ieee754_log10+0x4a>
 8005a3a:	1518      	asrs	r0, r3, #20
 8005a3c:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8005a40:	4410      	add	r0, r2
 8005a42:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005a46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005a4a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005a4e:	f7fa fcd1 	bl	80003f4 <__aeabi_i2d>
 8005a52:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8005a56:	3303      	adds	r3, #3
 8005a58:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005a5c:	a312      	add	r3, pc, #72	@ (adr r3, 8005aa8 <__ieee754_log10+0xd0>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	4606      	mov	r6, r0
 8005a64:	460f      	mov	r7, r1
 8005a66:	f7fa fd2f 	bl	80004c8 <__aeabi_dmul>
 8005a6a:	4680      	mov	r8, r0
 8005a6c:	4689      	mov	r9, r1
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	f000 fecd 	bl	8006810 <__ieee754_log>
 8005a76:	a30e      	add	r3, pc, #56	@ (adr r3, 8005ab0 <__ieee754_log10+0xd8>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fd24 	bl	80004c8 <__aeabi_dmul>
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	f7fa fb6a 	bl	800015c <__adddf3>
 8005a88:	a30b      	add	r3, pc, #44	@ (adr r3, 8005ab8 <__ieee754_log10+0xe0>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	4604      	mov	r4, r0
 8005a90:	460d      	mov	r5, r1
 8005a92:	4630      	mov	r0, r6
 8005a94:	4639      	mov	r1, r7
 8005a96:	f7fa fd17 	bl	80004c8 <__aeabi_dmul>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	e7c5      	b.n	8005a30 <__ieee754_log10+0x58>
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	11f12b36 	.word	0x11f12b36
 8005aac:	3d59fef3 	.word	0x3d59fef3
 8005ab0:	1526e50e 	.word	0x1526e50e
 8005ab4:	3fdbcb7b 	.word	0x3fdbcb7b
 8005ab8:	509f6000 	.word	0x509f6000
 8005abc:	3fd34413 	.word	0x3fd34413
 8005ac0:	c3500000 	.word	0xc3500000
 8005ac4:	43500000 	.word	0x43500000
 8005ac8:	7fefffff 	.word	0x7fefffff
 8005acc:	00000000 	.word	0x00000000

08005ad0 <__ieee754_pow>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	b091      	sub	sp, #68	@ 0x44
 8005ad6:	e9cd 2300 	strd	r2, r3, [sp]
 8005ada:	468b      	mov	fp, r1
 8005adc:	e9dd 1800 	ldrd	r1, r8, [sp]
 8005ae0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8005ae4:	4682      	mov	sl, r0
 8005ae6:	ea57 0001 	orrs.w	r0, r7, r1
 8005aea:	d112      	bne.n	8005b12 <__ieee754_pow+0x42>
 8005aec:	4653      	mov	r3, sl
 8005aee:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8005af2:	18db      	adds	r3, r3, r3
 8005af4:	4152      	adcs	r2, r2
 8005af6:	4298      	cmp	r0, r3
 8005af8:	4b91      	ldr	r3, [pc, #580]	@ (8005d40 <__ieee754_pow+0x270>)
 8005afa:	4193      	sbcs	r3, r2
 8005afc:	f080 84ce 	bcs.w	800649c <__ieee754_pow+0x9cc>
 8005b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b04:	4650      	mov	r0, sl
 8005b06:	4659      	mov	r1, fp
 8005b08:	f7fa fb28 	bl	800015c <__adddf3>
 8005b0c:	b011      	add	sp, #68	@ 0x44
 8005b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b12:	4b8c      	ldr	r3, [pc, #560]	@ (8005d44 <__ieee754_pow+0x274>)
 8005b14:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8005b18:	429e      	cmp	r6, r3
 8005b1a:	465d      	mov	r5, fp
 8005b1c:	46d1      	mov	r9, sl
 8005b1e:	d807      	bhi.n	8005b30 <__ieee754_pow+0x60>
 8005b20:	d102      	bne.n	8005b28 <__ieee754_pow+0x58>
 8005b22:	f1ba 0f00 	cmp.w	sl, #0
 8005b26:	d1eb      	bne.n	8005b00 <__ieee754_pow+0x30>
 8005b28:	429f      	cmp	r7, r3
 8005b2a:	d801      	bhi.n	8005b30 <__ieee754_pow+0x60>
 8005b2c:	d10f      	bne.n	8005b4e <__ieee754_pow+0x7e>
 8005b2e:	b171      	cbz	r1, 8005b4e <__ieee754_pow+0x7e>
 8005b30:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005b34:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005b38:	ea55 0509 	orrs.w	r5, r5, r9
 8005b3c:	d1e0      	bne.n	8005b00 <__ieee754_pow+0x30>
 8005b3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005b42:	18db      	adds	r3, r3, r3
 8005b44:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005b48:	4152      	adcs	r2, r2
 8005b4a:	429d      	cmp	r5, r3
 8005b4c:	e7d4      	b.n	8005af8 <__ieee754_pow+0x28>
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	4633      	mov	r3, r6
 8005b52:	da39      	bge.n	8005bc8 <__ieee754_pow+0xf8>
 8005b54:	4a7c      	ldr	r2, [pc, #496]	@ (8005d48 <__ieee754_pow+0x278>)
 8005b56:	4297      	cmp	r7, r2
 8005b58:	d84e      	bhi.n	8005bf8 <__ieee754_pow+0x128>
 8005b5a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005b5e:	4297      	cmp	r7, r2
 8005b60:	f240 84ab 	bls.w	80064ba <__ieee754_pow+0x9ea>
 8005b64:	153a      	asrs	r2, r7, #20
 8005b66:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005b6a:	2a14      	cmp	r2, #20
 8005b6c:	dd0f      	ble.n	8005b8e <__ieee754_pow+0xbe>
 8005b6e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005b72:	fa21 f402 	lsr.w	r4, r1, r2
 8005b76:	fa04 f202 	lsl.w	r2, r4, r2
 8005b7a:	428a      	cmp	r2, r1
 8005b7c:	f040 849d 	bne.w	80064ba <__ieee754_pow+0x9ea>
 8005b80:	f004 0401 	and.w	r4, r4, #1
 8005b84:	f1c4 0402 	rsb	r4, r4, #2
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	d15a      	bne.n	8005c42 <__ieee754_pow+0x172>
 8005b8c:	e00e      	b.n	8005bac <__ieee754_pow+0xdc>
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d156      	bne.n	8005c40 <__ieee754_pow+0x170>
 8005b92:	f1c2 0214 	rsb	r2, r2, #20
 8005b96:	fa47 f402 	asr.w	r4, r7, r2
 8005b9a:	fa04 f202 	lsl.w	r2, r4, r2
 8005b9e:	42ba      	cmp	r2, r7
 8005ba0:	f040 8488 	bne.w	80064b4 <__ieee754_pow+0x9e4>
 8005ba4:	f004 0401 	and.w	r4, r4, #1
 8005ba8:	f1c4 0402 	rsb	r4, r4, #2
 8005bac:	4a67      	ldr	r2, [pc, #412]	@ (8005d4c <__ieee754_pow+0x27c>)
 8005bae:	4297      	cmp	r7, r2
 8005bb0:	d130      	bne.n	8005c14 <__ieee754_pow+0x144>
 8005bb2:	f1b8 0f00 	cmp.w	r8, #0
 8005bb6:	f280 8479 	bge.w	80064ac <__ieee754_pow+0x9dc>
 8005bba:	4652      	mov	r2, sl
 8005bbc:	465b      	mov	r3, fp
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	4962      	ldr	r1, [pc, #392]	@ (8005d4c <__ieee754_pow+0x27c>)
 8005bc2:	f7fa fdab 	bl	800071c <__aeabi_ddiv>
 8005bc6:	e7a1      	b.n	8005b0c <__ieee754_pow+0x3c>
 8005bc8:	2400      	movs	r4, #0
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	d139      	bne.n	8005c42 <__ieee754_pow+0x172>
 8005bce:	4a5d      	ldr	r2, [pc, #372]	@ (8005d44 <__ieee754_pow+0x274>)
 8005bd0:	4297      	cmp	r7, r2
 8005bd2:	d1eb      	bne.n	8005bac <__ieee754_pow+0xdc>
 8005bd4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8005bd8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8005bdc:	ea53 0309 	orrs.w	r3, r3, r9
 8005be0:	f000 845c 	beq.w	800649c <__ieee754_pow+0x9cc>
 8005be4:	4b5a      	ldr	r3, [pc, #360]	@ (8005d50 <__ieee754_pow+0x280>)
 8005be6:	429e      	cmp	r6, r3
 8005be8:	d908      	bls.n	8005bfc <__ieee754_pow+0x12c>
 8005bea:	f1b8 0f00 	cmp.w	r8, #0
 8005bee:	f2c0 8459 	blt.w	80064a4 <__ieee754_pow+0x9d4>
 8005bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bf6:	e789      	b.n	8005b0c <__ieee754_pow+0x3c>
 8005bf8:	2402      	movs	r4, #2
 8005bfa:	e7e6      	b.n	8005bca <__ieee754_pow+0xfa>
 8005bfc:	f1b8 0f00 	cmp.w	r8, #0
 8005c00:	f04f 0000 	mov.w	r0, #0
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	da80      	bge.n	8005b0c <__ieee754_pow+0x3c>
 8005c0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005c0e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005c12:	e77b      	b.n	8005b0c <__ieee754_pow+0x3c>
 8005c14:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8005c18:	d106      	bne.n	8005c28 <__ieee754_pow+0x158>
 8005c1a:	4652      	mov	r2, sl
 8005c1c:	465b      	mov	r3, fp
 8005c1e:	4650      	mov	r0, sl
 8005c20:	4659      	mov	r1, fp
 8005c22:	f7fa fc51 	bl	80004c8 <__aeabi_dmul>
 8005c26:	e771      	b.n	8005b0c <__ieee754_pow+0x3c>
 8005c28:	4a4a      	ldr	r2, [pc, #296]	@ (8005d54 <__ieee754_pow+0x284>)
 8005c2a:	4590      	cmp	r8, r2
 8005c2c:	d109      	bne.n	8005c42 <__ieee754_pow+0x172>
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	db07      	blt.n	8005c42 <__ieee754_pow+0x172>
 8005c32:	4650      	mov	r0, sl
 8005c34:	4659      	mov	r1, fp
 8005c36:	b011      	add	sp, #68	@ 0x44
 8005c38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	f000 bd12 	b.w	8006664 <__ieee754_sqrt>
 8005c40:	2400      	movs	r4, #0
 8005c42:	4650      	mov	r0, sl
 8005c44:	4659      	mov	r1, fp
 8005c46:	9302      	str	r3, [sp, #8]
 8005c48:	f000 fc6a 	bl	8006520 <fabs>
 8005c4c:	9b02      	ldr	r3, [sp, #8]
 8005c4e:	f1b9 0f00 	cmp.w	r9, #0
 8005c52:	d127      	bne.n	8005ca4 <__ieee754_pow+0x1d4>
 8005c54:	4a3d      	ldr	r2, [pc, #244]	@ (8005d4c <__ieee754_pow+0x27c>)
 8005c56:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8005c5a:	4594      	cmp	ip, r2
 8005c5c:	d000      	beq.n	8005c60 <__ieee754_pow+0x190>
 8005c5e:	bb0e      	cbnz	r6, 8005ca4 <__ieee754_pow+0x1d4>
 8005c60:	f1b8 0f00 	cmp.w	r8, #0
 8005c64:	da05      	bge.n	8005c72 <__ieee754_pow+0x1a2>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	4937      	ldr	r1, [pc, #220]	@ (8005d4c <__ieee754_pow+0x27c>)
 8005c6e:	f7fa fd55 	bl	800071c <__aeabi_ddiv>
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	f6bf af4a 	bge.w	8005b0c <__ieee754_pow+0x3c>
 8005c78:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8005c7c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005c80:	4326      	orrs	r6, r4
 8005c82:	d108      	bne.n	8005c96 <__ieee754_pow+0x1c6>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f7fa fa64 	bl	8000158 <__aeabi_dsub>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	e795      	b.n	8005bc2 <__ieee754_pow+0xf2>
 8005c96:	2c01      	cmp	r4, #1
 8005c98:	f47f af38 	bne.w	8005b0c <__ieee754_pow+0x3c>
 8005c9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	e733      	b.n	8005b0c <__ieee754_pow+0x3c>
 8005ca4:	0fea      	lsrs	r2, r5, #31
 8005ca6:	3a01      	subs	r2, #1
 8005ca8:	ea52 0c04 	orrs.w	ip, r2, r4
 8005cac:	d102      	bne.n	8005cb4 <__ieee754_pow+0x1e4>
 8005cae:	4652      	mov	r2, sl
 8005cb0:	465b      	mov	r3, fp
 8005cb2:	e7e9      	b.n	8005c88 <__ieee754_pow+0x1b8>
 8005cb4:	f04f 0900 	mov.w	r9, #0
 8005cb8:	3c01      	subs	r4, #1
 8005cba:	4314      	orrs	r4, r2
 8005cbc:	bf14      	ite	ne
 8005cbe:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8005d4c <__ieee754_pow+0x27c>
 8005cc2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8005d58 <__ieee754_pow+0x288>
 8005cc6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8005cca:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8005cce:	f240 8107 	bls.w	8005ee0 <__ieee754_pow+0x410>
 8005cd2:	4b22      	ldr	r3, [pc, #136]	@ (8005d5c <__ieee754_pow+0x28c>)
 8005cd4:	429f      	cmp	r7, r3
 8005cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d50 <__ieee754_pow+0x280>)
 8005cd8:	d913      	bls.n	8005d02 <__ieee754_pow+0x232>
 8005cda:	429e      	cmp	r6, r3
 8005cdc:	d808      	bhi.n	8005cf0 <__ieee754_pow+0x220>
 8005cde:	f1b8 0f00 	cmp.w	r8, #0
 8005ce2:	da08      	bge.n	8005cf6 <__ieee754_pow+0x226>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	b011      	add	sp, #68	@ 0x44
 8005ce8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	f000 bcb4 	b.w	8006658 <__math_oflow>
 8005cf0:	f1b8 0f00 	cmp.w	r8, #0
 8005cf4:	dcf6      	bgt.n	8005ce4 <__ieee754_pow+0x214>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	b011      	add	sp, #68	@ 0x44
 8005cfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfe:	f000 bca6 	b.w	800664e <__math_uflow>
 8005d02:	429e      	cmp	r6, r3
 8005d04:	d20c      	bcs.n	8005d20 <__ieee754_pow+0x250>
 8005d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f7fa fe4d 	bl	80009ac <__aeabi_dcmplt>
 8005d12:	3800      	subs	r0, #0
 8005d14:	bf18      	it	ne
 8005d16:	2001      	movne	r0, #1
 8005d18:	f1b8 0f00 	cmp.w	r8, #0
 8005d1c:	daec      	bge.n	8005cf8 <__ieee754_pow+0x228>
 8005d1e:	e7e2      	b.n	8005ce6 <__ieee754_pow+0x216>
 8005d20:	4b0a      	ldr	r3, [pc, #40]	@ (8005d4c <__ieee754_pow+0x27c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	429e      	cmp	r6, r3
 8005d26:	d91b      	bls.n	8005d60 <__ieee754_pow+0x290>
 8005d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f7fa fe3d 	bl	80009ac <__aeabi_dcmplt>
 8005d32:	3800      	subs	r0, #0
 8005d34:	bf18      	it	ne
 8005d36:	2001      	movne	r0, #1
 8005d38:	f1b8 0f00 	cmp.w	r8, #0
 8005d3c:	dcd3      	bgt.n	8005ce6 <__ieee754_pow+0x216>
 8005d3e:	e7db      	b.n	8005cf8 <__ieee754_pow+0x228>
 8005d40:	fff00000 	.word	0xfff00000
 8005d44:	7ff00000 	.word	0x7ff00000
 8005d48:	433fffff 	.word	0x433fffff
 8005d4c:	3ff00000 	.word	0x3ff00000
 8005d50:	3fefffff 	.word	0x3fefffff
 8005d54:	3fe00000 	.word	0x3fe00000
 8005d58:	bff00000 	.word	0xbff00000
 8005d5c:	43f00000 	.word	0x43f00000
 8005d60:	4b5b      	ldr	r3, [pc, #364]	@ (8005ed0 <__ieee754_pow+0x400>)
 8005d62:	f7fa f9f9 	bl	8000158 <__aeabi_dsub>
 8005d66:	a352      	add	r3, pc, #328	@ (adr r3, 8005eb0 <__ieee754_pow+0x3e0>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	f7fa fbaa 	bl	80004c8 <__aeabi_dmul>
 8005d74:	a350      	add	r3, pc, #320	@ (adr r3, 8005eb8 <__ieee754_pow+0x3e8>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	460f      	mov	r7, r1
 8005d7e:	4620      	mov	r0, r4
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fba1 	bl	80004c8 <__aeabi_dmul>
 8005d86:	2200      	movs	r2, #0
 8005d88:	4682      	mov	sl, r0
 8005d8a:	468b      	mov	fp, r1
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4b50      	ldr	r3, [pc, #320]	@ (8005ed4 <__ieee754_pow+0x404>)
 8005d92:	f7fa fb99 	bl	80004c8 <__aeabi_dmul>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	a149      	add	r1, pc, #292	@ (adr r1, 8005ec0 <__ieee754_pow+0x3f0>)
 8005d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005da0:	f7fa f9da 	bl	8000158 <__aeabi_dsub>
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	f7fa fb8e 	bl	80004c8 <__aeabi_dmul>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	2000      	movs	r0, #0
 8005db2:	4949      	ldr	r1, [pc, #292]	@ (8005ed8 <__ieee754_pow+0x408>)
 8005db4:	f7fa f9d0 	bl	8000158 <__aeabi_dsub>
 8005db8:	4622      	mov	r2, r4
 8005dba:	4680      	mov	r8, r0
 8005dbc:	4689      	mov	r9, r1
 8005dbe:	462b      	mov	r3, r5
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7fa fb80 	bl	80004c8 <__aeabi_dmul>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4640      	mov	r0, r8
 8005dce:	4649      	mov	r1, r9
 8005dd0:	f7fa fb7a 	bl	80004c8 <__aeabi_dmul>
 8005dd4:	a33c      	add	r3, pc, #240	@ (adr r3, 8005ec8 <__ieee754_pow+0x3f8>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f7fa fb75 	bl	80004c8 <__aeabi_dmul>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4650      	mov	r0, sl
 8005de4:	4659      	mov	r1, fp
 8005de6:	f7fa f9b7 	bl	8000158 <__aeabi_dsub>
 8005dea:	2400      	movs	r4, #0
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4680      	mov	r8, r0
 8005df2:	4689      	mov	r9, r1
 8005df4:	4630      	mov	r0, r6
 8005df6:	4639      	mov	r1, r7
 8005df8:	f7fa f9b0 	bl	800015c <__adddf3>
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	463b      	mov	r3, r7
 8005e00:	4620      	mov	r0, r4
 8005e02:	460d      	mov	r5, r1
 8005e04:	f7fa f9a8 	bl	8000158 <__aeabi_dsub>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f7fa f9a2 	bl	8000158 <__aeabi_dsub>
 8005e14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	9304      	str	r3, [sp, #16]
 8005e20:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e2c:	4652      	mov	r2, sl
 8005e2e:	465b      	mov	r3, fp
 8005e30:	f7fa f992 	bl	8000158 <__aeabi_dsub>
 8005e34:	4622      	mov	r2, r4
 8005e36:	462b      	mov	r3, r5
 8005e38:	f7fa fb46 	bl	80004c8 <__aeabi_dmul>
 8005e3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e40:	4680      	mov	r8, r0
 8005e42:	4689      	mov	r9, r1
 8005e44:	4630      	mov	r0, r6
 8005e46:	4639      	mov	r1, r7
 8005e48:	f7fa fb3e 	bl	80004c8 <__aeabi_dmul>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	f7fa f982 	bl	800015c <__adddf3>
 8005e58:	4652      	mov	r2, sl
 8005e5a:	465b      	mov	r3, fp
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	460f      	mov	r7, r1
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa fb30 	bl	80004c8 <__aeabi_dmul>
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	4689      	mov	r9, r1
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa f972 	bl	800015c <__adddf3>
 8005e78:	4b18      	ldr	r3, [pc, #96]	@ (8005edc <__ieee754_pow+0x40c>)
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4299      	cmp	r1, r3
 8005e7e:	460d      	mov	r5, r1
 8005e80:	468a      	mov	sl, r1
 8005e82:	468b      	mov	fp, r1
 8005e84:	f340 82e0 	ble.w	8006448 <__ieee754_pow+0x978>
 8005e88:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005e8c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005e90:	4303      	orrs	r3, r0
 8005e92:	f000 81df 	beq.w	8006254 <__ieee754_pow+0x784>
 8005e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f7fa fd85 	bl	80009ac <__aeabi_dcmplt>
 8005ea2:	3800      	subs	r0, #0
 8005ea4:	bf18      	it	ne
 8005ea6:	2001      	movne	r0, #1
 8005ea8:	e71d      	b.n	8005ce6 <__ieee754_pow+0x216>
 8005eaa:	bf00      	nop
 8005eac:	f3af 8000 	nop.w
 8005eb0:	60000000 	.word	0x60000000
 8005eb4:	3ff71547 	.word	0x3ff71547
 8005eb8:	f85ddf44 	.word	0xf85ddf44
 8005ebc:	3e54ae0b 	.word	0x3e54ae0b
 8005ec0:	55555555 	.word	0x55555555
 8005ec4:	3fd55555 	.word	0x3fd55555
 8005ec8:	652b82fe 	.word	0x652b82fe
 8005ecc:	3ff71547 	.word	0x3ff71547
 8005ed0:	3ff00000 	.word	0x3ff00000
 8005ed4:	3fd00000 	.word	0x3fd00000
 8005ed8:	3fe00000 	.word	0x3fe00000
 8005edc:	408fffff 	.word	0x408fffff
 8005ee0:	4ad3      	ldr	r2, [pc, #844]	@ (8006230 <__ieee754_pow+0x760>)
 8005ee2:	402a      	ands	r2, r5
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	f040 817a 	bne.w	80061de <__ieee754_pow+0x70e>
 8005eea:	4bd2      	ldr	r3, [pc, #840]	@ (8006234 <__ieee754_pow+0x764>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	f7fa faeb 	bl	80004c8 <__aeabi_dmul>
 8005ef2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	151a      	asrs	r2, r3, #20
 8005efa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005efe:	4422      	add	r2, r4
 8005f00:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f02:	4acd      	ldr	r2, [pc, #820]	@ (8006238 <__ieee754_pow+0x768>)
 8005f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f08:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005f12:	dd08      	ble.n	8005f26 <__ieee754_pow+0x456>
 8005f14:	4ac9      	ldr	r2, [pc, #804]	@ (800623c <__ieee754_pow+0x76c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f340 8163 	ble.w	80061e2 <__ieee754_pow+0x712>
 8005f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f1e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005f22:	3301      	adds	r3, #1
 8005f24:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f26:	2600      	movs	r6, #0
 8005f28:	00f3      	lsls	r3, r6, #3
 8005f2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f2c:	4bc4      	ldr	r3, [pc, #784]	@ (8006240 <__ieee754_pow+0x770>)
 8005f2e:	4629      	mov	r1, r5
 8005f30:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005f3e:	4623      	mov	r3, r4
 8005f40:	4682      	mov	sl, r0
 8005f42:	f7fa f909 	bl	8000158 <__aeabi_dsub>
 8005f46:	4652      	mov	r2, sl
 8005f48:	462b      	mov	r3, r5
 8005f4a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005f4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f52:	f7fa f903 	bl	800015c <__adddf3>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	49b9      	ldr	r1, [pc, #740]	@ (8006244 <__ieee754_pow+0x774>)
 8005f5e:	f7fa fbdd 	bl	800071c <__aeabi_ddiv>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005f6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f6e:	f7fa faab 	bl	80004c8 <__aeabi_dmul>
 8005f72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f76:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005f7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2200      	movs	r2, #0
 8005f82:	46ab      	mov	fp, r5
 8005f84:	106d      	asrs	r5, r5, #1
 8005f86:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005f90:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005f94:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	f7fa fa92 	bl	80004c8 <__aeabi_dmul>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fac:	f7fa f8d4 	bl	8000158 <__aeabi_dsub>
 8005fb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	460f      	mov	r7, r1
 8005fb8:	4620      	mov	r0, r4
 8005fba:	4629      	mov	r1, r5
 8005fbc:	f7fa f8cc 	bl	8000158 <__aeabi_dsub>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4650      	mov	r0, sl
 8005fc6:	4659      	mov	r1, fp
 8005fc8:	f7fa f8c6 	bl	8000158 <__aeabi_dsub>
 8005fcc:	4642      	mov	r2, r8
 8005fce:	464b      	mov	r3, r9
 8005fd0:	f7fa fa7a 	bl	80004c8 <__aeabi_dmul>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	f7fa f8bc 	bl	8000158 <__aeabi_dsub>
 8005fe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005fe4:	f7fa fa70 	bl	80004c8 <__aeabi_dmul>
 8005fe8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	f7fa fa68 	bl	80004c8 <__aeabi_dmul>
 8005ff8:	a37b      	add	r3, pc, #492	@ (adr r3, 80061e8 <__ieee754_pow+0x718>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	f7fa fa61 	bl	80004c8 <__aeabi_dmul>
 8006006:	a37a      	add	r3, pc, #488	@ (adr r3, 80061f0 <__ieee754_pow+0x720>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f7fa f8a6 	bl	800015c <__adddf3>
 8006010:	4622      	mov	r2, r4
 8006012:	462b      	mov	r3, r5
 8006014:	f7fa fa58 	bl	80004c8 <__aeabi_dmul>
 8006018:	a377      	add	r3, pc, #476	@ (adr r3, 80061f8 <__ieee754_pow+0x728>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f7fa f89d 	bl	800015c <__adddf3>
 8006022:	4622      	mov	r2, r4
 8006024:	462b      	mov	r3, r5
 8006026:	f7fa fa4f 	bl	80004c8 <__aeabi_dmul>
 800602a:	a375      	add	r3, pc, #468	@ (adr r3, 8006200 <__ieee754_pow+0x730>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f7fa f894 	bl	800015c <__adddf3>
 8006034:	4622      	mov	r2, r4
 8006036:	462b      	mov	r3, r5
 8006038:	f7fa fa46 	bl	80004c8 <__aeabi_dmul>
 800603c:	a372      	add	r3, pc, #456	@ (adr r3, 8006208 <__ieee754_pow+0x738>)
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f7fa f88b 	bl	800015c <__adddf3>
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	f7fa fa3d 	bl	80004c8 <__aeabi_dmul>
 800604e:	a370      	add	r3, pc, #448	@ (adr r3, 8006210 <__ieee754_pow+0x740>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f7fa f882 	bl	800015c <__adddf3>
 8006058:	4622      	mov	r2, r4
 800605a:	4606      	mov	r6, r0
 800605c:	460f      	mov	r7, r1
 800605e:	462b      	mov	r3, r5
 8006060:	4620      	mov	r0, r4
 8006062:	4629      	mov	r1, r5
 8006064:	f7fa fa30 	bl	80004c8 <__aeabi_dmul>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	4630      	mov	r0, r6
 800606e:	4639      	mov	r1, r7
 8006070:	f7fa fa2a 	bl	80004c8 <__aeabi_dmul>
 8006074:	4604      	mov	r4, r0
 8006076:	460d      	mov	r5, r1
 8006078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800607c:	4642      	mov	r2, r8
 800607e:	464b      	mov	r3, r9
 8006080:	f7fa f86c 	bl	800015c <__adddf3>
 8006084:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006088:	f7fa fa1e 	bl	80004c8 <__aeabi_dmul>
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	f7fa f864 	bl	800015c <__adddf3>
 8006094:	4642      	mov	r2, r8
 8006096:	4682      	mov	sl, r0
 8006098:	468b      	mov	fp, r1
 800609a:	464b      	mov	r3, r9
 800609c:	4640      	mov	r0, r8
 800609e:	4649      	mov	r1, r9
 80060a0:	f7fa fa12 	bl	80004c8 <__aeabi_dmul>
 80060a4:	2200      	movs	r2, #0
 80060a6:	4b68      	ldr	r3, [pc, #416]	@ (8006248 <__ieee754_pow+0x778>)
 80060a8:	4606      	mov	r6, r0
 80060aa:	460f      	mov	r7, r1
 80060ac:	f7fa f856 	bl	800015c <__adddf3>
 80060b0:	4652      	mov	r2, sl
 80060b2:	465b      	mov	r3, fp
 80060b4:	f7fa f852 	bl	800015c <__adddf3>
 80060b8:	2400      	movs	r4, #0
 80060ba:	460d      	mov	r5, r1
 80060bc:	4622      	mov	r2, r4
 80060be:	460b      	mov	r3, r1
 80060c0:	4640      	mov	r0, r8
 80060c2:	4649      	mov	r1, r9
 80060c4:	f7fa fa00 	bl	80004c8 <__aeabi_dmul>
 80060c8:	2200      	movs	r2, #0
 80060ca:	4680      	mov	r8, r0
 80060cc:	4689      	mov	r9, r1
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006248 <__ieee754_pow+0x778>)
 80060d4:	f7fa f840 	bl	8000158 <__aeabi_dsub>
 80060d8:	4632      	mov	r2, r6
 80060da:	463b      	mov	r3, r7
 80060dc:	f7fa f83c 	bl	8000158 <__aeabi_dsub>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4650      	mov	r0, sl
 80060e6:	4659      	mov	r1, fp
 80060e8:	f7fa f836 	bl	8000158 <__aeabi_dsub>
 80060ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060f0:	f7fa f9ea 	bl	80004c8 <__aeabi_dmul>
 80060f4:	4622      	mov	r2, r4
 80060f6:	4606      	mov	r6, r0
 80060f8:	460f      	mov	r7, r1
 80060fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060fe:	462b      	mov	r3, r5
 8006100:	f7fa f9e2 	bl	80004c8 <__aeabi_dmul>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4630      	mov	r0, r6
 800610a:	4639      	mov	r1, r7
 800610c:	f7fa f826 	bl	800015c <__adddf3>
 8006110:	2400      	movs	r4, #0
 8006112:	4606      	mov	r6, r0
 8006114:	460f      	mov	r7, r1
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4640      	mov	r0, r8
 800611c:	4649      	mov	r1, r9
 800611e:	f7fa f81d 	bl	800015c <__adddf3>
 8006122:	a33d      	add	r3, pc, #244	@ (adr r3, 8006218 <__ieee754_pow+0x748>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	4620      	mov	r0, r4
 800612a:	460d      	mov	r5, r1
 800612c:	f7fa f9cc 	bl	80004c8 <__aeabi_dmul>
 8006130:	4642      	mov	r2, r8
 8006132:	464b      	mov	r3, r9
 8006134:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006138:	4620      	mov	r0, r4
 800613a:	4629      	mov	r1, r5
 800613c:	f7fa f80c 	bl	8000158 <__aeabi_dsub>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa f806 	bl	8000158 <__aeabi_dsub>
 800614c:	a334      	add	r3, pc, #208	@ (adr r3, 8006220 <__ieee754_pow+0x750>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f7fa f9b9 	bl	80004c8 <__aeabi_dmul>
 8006156:	a334      	add	r3, pc, #208	@ (adr r3, 8006228 <__ieee754_pow+0x758>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	4606      	mov	r6, r0
 800615e:	460f      	mov	r7, r1
 8006160:	4620      	mov	r0, r4
 8006162:	4629      	mov	r1, r5
 8006164:	f7fa f9b0 	bl	80004c8 <__aeabi_dmul>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7f9 fff4 	bl	800015c <__adddf3>
 8006174:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006176:	4b35      	ldr	r3, [pc, #212]	@ (800624c <__ieee754_pow+0x77c>)
 8006178:	2400      	movs	r4, #0
 800617a:	4413      	add	r3, r2
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	f7f9 ffec 	bl	800015c <__adddf3>
 8006184:	4682      	mov	sl, r0
 8006186:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006188:	468b      	mov	fp, r1
 800618a:	f7fa f933 	bl	80003f4 <__aeabi_i2d>
 800618e:	4606      	mov	r6, r0
 8006190:	460f      	mov	r7, r1
 8006192:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006194:	4b2e      	ldr	r3, [pc, #184]	@ (8006250 <__ieee754_pow+0x780>)
 8006196:	4413      	add	r3, r2
 8006198:	e9d3 8900 	ldrd	r8, r9, [r3]
 800619c:	4652      	mov	r2, sl
 800619e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061a2:	465b      	mov	r3, fp
 80061a4:	f7f9 ffda 	bl	800015c <__adddf3>
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	f7f9 ffd6 	bl	800015c <__adddf3>
 80061b0:	4632      	mov	r2, r6
 80061b2:	463b      	mov	r3, r7
 80061b4:	f7f9 ffd2 	bl	800015c <__adddf3>
 80061b8:	4632      	mov	r2, r6
 80061ba:	463b      	mov	r3, r7
 80061bc:	4620      	mov	r0, r4
 80061be:	460d      	mov	r5, r1
 80061c0:	f7f9 ffca 	bl	8000158 <__aeabi_dsub>
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	f7f9 ffc6 	bl	8000158 <__aeabi_dsub>
 80061cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061d0:	f7f9 ffc2 	bl	8000158 <__aeabi_dsub>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4650      	mov	r0, sl
 80061da:	4659      	mov	r1, fp
 80061dc:	e618      	b.n	8005e10 <__ieee754_pow+0x340>
 80061de:	2400      	movs	r4, #0
 80061e0:	e68a      	b.n	8005ef8 <__ieee754_pow+0x428>
 80061e2:	2601      	movs	r6, #1
 80061e4:	e6a0      	b.n	8005f28 <__ieee754_pow+0x458>
 80061e6:	bf00      	nop
 80061e8:	4a454eef 	.word	0x4a454eef
 80061ec:	3fca7e28 	.word	0x3fca7e28
 80061f0:	93c9db65 	.word	0x93c9db65
 80061f4:	3fcd864a 	.word	0x3fcd864a
 80061f8:	a91d4101 	.word	0xa91d4101
 80061fc:	3fd17460 	.word	0x3fd17460
 8006200:	518f264d 	.word	0x518f264d
 8006204:	3fd55555 	.word	0x3fd55555
 8006208:	db6fabff 	.word	0xdb6fabff
 800620c:	3fdb6db6 	.word	0x3fdb6db6
 8006210:	33333303 	.word	0x33333303
 8006214:	3fe33333 	.word	0x3fe33333
 8006218:	e0000000 	.word	0xe0000000
 800621c:	3feec709 	.word	0x3feec709
 8006220:	dc3a03fd 	.word	0xdc3a03fd
 8006224:	3feec709 	.word	0x3feec709
 8006228:	145b01f5 	.word	0x145b01f5
 800622c:	be3e2fe0 	.word	0xbe3e2fe0
 8006230:	7ff00000 	.word	0x7ff00000
 8006234:	43400000 	.word	0x43400000
 8006238:	0003988e 	.word	0x0003988e
 800623c:	000bb679 	.word	0x000bb679
 8006240:	08006c50 	.word	0x08006c50
 8006244:	3ff00000 	.word	0x3ff00000
 8006248:	40080000 	.word	0x40080000
 800624c:	08006c30 	.word	0x08006c30
 8006250:	08006c40 	.word	0x08006c40
 8006254:	a39a      	add	r3, pc, #616	@ (adr r3, 80064c0 <__ieee754_pow+0x9f0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	4630      	mov	r0, r6
 800625c:	4639      	mov	r1, r7
 800625e:	f7f9 ff7d 	bl	800015c <__adddf3>
 8006262:	4642      	mov	r2, r8
 8006264:	e9cd 0100 	strd	r0, r1, [sp]
 8006268:	464b      	mov	r3, r9
 800626a:	4620      	mov	r0, r4
 800626c:	4629      	mov	r1, r5
 800626e:	f7f9 ff73 	bl	8000158 <__aeabi_dsub>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800627a:	f7fa fbb5 	bl	80009e8 <__aeabi_dcmpgt>
 800627e:	2800      	cmp	r0, #0
 8006280:	f47f ae09 	bne.w	8005e96 <__ieee754_pow+0x3c6>
 8006284:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006288:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800628c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006290:	fa43 fa0a 	asr.w	sl, r3, sl
 8006294:	44da      	add	sl, fp
 8006296:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800629a:	489b      	ldr	r0, [pc, #620]	@ (8006508 <__ieee754_pow+0xa38>)
 800629c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80062a0:	4108      	asrs	r0, r1
 80062a2:	ea00 030a 	and.w	r3, r0, sl
 80062a6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80062aa:	f1c1 0114 	rsb	r1, r1, #20
 80062ae:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80062b2:	4640      	mov	r0, r8
 80062b4:	fa4a fa01 	asr.w	sl, sl, r1
 80062b8:	f1bb 0f00 	cmp.w	fp, #0
 80062bc:	4649      	mov	r1, r9
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	bfb8      	it	lt
 80062c4:	f1ca 0a00 	rsblt	sl, sl, #0
 80062c8:	f7f9 ff46 	bl	8000158 <__aeabi_dsub>
 80062cc:	4680      	mov	r8, r0
 80062ce:	4689      	mov	r9, r1
 80062d0:	2400      	movs	r4, #0
 80062d2:	4632      	mov	r2, r6
 80062d4:	463b      	mov	r3, r7
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	f7f9 ff3f 	bl	800015c <__adddf3>
 80062de:	a37a      	add	r3, pc, #488	@ (adr r3, 80064c8 <__ieee754_pow+0x9f8>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	4620      	mov	r0, r4
 80062e6:	460d      	mov	r5, r1
 80062e8:	f7fa f8ee 	bl	80004c8 <__aeabi_dmul>
 80062ec:	4642      	mov	r2, r8
 80062ee:	464b      	mov	r3, r9
 80062f0:	e9cd 0100 	strd	r0, r1, [sp]
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7f9 ff2e 	bl	8000158 <__aeabi_dsub>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4630      	mov	r0, r6
 8006302:	4639      	mov	r1, r7
 8006304:	f7f9 ff28 	bl	8000158 <__aeabi_dsub>
 8006308:	a371      	add	r3, pc, #452	@ (adr r3, 80064d0 <__ieee754_pow+0xa00>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7fa f8db 	bl	80004c8 <__aeabi_dmul>
 8006312:	a371      	add	r3, pc, #452	@ (adr r3, 80064d8 <__ieee754_pow+0xa08>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	4680      	mov	r8, r0
 800631a:	4689      	mov	r9, r1
 800631c:	4620      	mov	r0, r4
 800631e:	4629      	mov	r1, r5
 8006320:	f7fa f8d2 	bl	80004c8 <__aeabi_dmul>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7f9 ff16 	bl	800015c <__adddf3>
 8006330:	4604      	mov	r4, r0
 8006332:	460d      	mov	r5, r1
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800633c:	f7f9 ff0e 	bl	800015c <__adddf3>
 8006340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	f7f9 ff06 	bl	8000158 <__aeabi_dsub>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4620      	mov	r0, r4
 8006352:	4629      	mov	r1, r5
 8006354:	f7f9 ff00 	bl	8000158 <__aeabi_dsub>
 8006358:	4642      	mov	r2, r8
 800635a:	4606      	mov	r6, r0
 800635c:	460f      	mov	r7, r1
 800635e:	464b      	mov	r3, r9
 8006360:	4640      	mov	r0, r8
 8006362:	4649      	mov	r1, r9
 8006364:	f7fa f8b0 	bl	80004c8 <__aeabi_dmul>
 8006368:	a35d      	add	r3, pc, #372	@ (adr r3, 80064e0 <__ieee754_pow+0xa10>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	4604      	mov	r4, r0
 8006370:	460d      	mov	r5, r1
 8006372:	f7fa f8a9 	bl	80004c8 <__aeabi_dmul>
 8006376:	a35c      	add	r3, pc, #368	@ (adr r3, 80064e8 <__ieee754_pow+0xa18>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7f9 feec 	bl	8000158 <__aeabi_dsub>
 8006380:	4622      	mov	r2, r4
 8006382:	462b      	mov	r3, r5
 8006384:	f7fa f8a0 	bl	80004c8 <__aeabi_dmul>
 8006388:	a359      	add	r3, pc, #356	@ (adr r3, 80064f0 <__ieee754_pow+0xa20>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7f9 fee5 	bl	800015c <__adddf3>
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	f7fa f897 	bl	80004c8 <__aeabi_dmul>
 800639a:	a357      	add	r3, pc, #348	@ (adr r3, 80064f8 <__ieee754_pow+0xa28>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f7f9 feda 	bl	8000158 <__aeabi_dsub>
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	f7fa f88e 	bl	80004c8 <__aeabi_dmul>
 80063ac:	a354      	add	r3, pc, #336	@ (adr r3, 8006500 <__ieee754_pow+0xa30>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f7f9 fed3 	bl	800015c <__adddf3>
 80063b6:	4622      	mov	r2, r4
 80063b8:	462b      	mov	r3, r5
 80063ba:	f7fa f885 	bl	80004c8 <__aeabi_dmul>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7f9 fec7 	bl	8000158 <__aeabi_dsub>
 80063ca:	4604      	mov	r4, r0
 80063cc:	460d      	mov	r5, r1
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7fa f877 	bl	80004c8 <__aeabi_dmul>
 80063da:	2200      	movs	r2, #0
 80063dc:	e9cd 0100 	strd	r0, r1, [sp]
 80063e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063e4:	4620      	mov	r0, r4
 80063e6:	4629      	mov	r1, r5
 80063e8:	f7f9 feb6 	bl	8000158 <__aeabi_dsub>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063f4:	f7fa f992 	bl	800071c <__aeabi_ddiv>
 80063f8:	4632      	mov	r2, r6
 80063fa:	4604      	mov	r4, r0
 80063fc:	460d      	mov	r5, r1
 80063fe:	463b      	mov	r3, r7
 8006400:	4640      	mov	r0, r8
 8006402:	4649      	mov	r1, r9
 8006404:	f7fa f860 	bl	80004c8 <__aeabi_dmul>
 8006408:	4632      	mov	r2, r6
 800640a:	463b      	mov	r3, r7
 800640c:	f7f9 fea6 	bl	800015c <__adddf3>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4620      	mov	r0, r4
 8006416:	4629      	mov	r1, r5
 8006418:	f7f9 fe9e 	bl	8000158 <__aeabi_dsub>
 800641c:	4642      	mov	r2, r8
 800641e:	464b      	mov	r3, r9
 8006420:	f7f9 fe9a 	bl	8000158 <__aeabi_dsub>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	2000      	movs	r0, #0
 800642a:	4938      	ldr	r1, [pc, #224]	@ (800650c <__ieee754_pow+0xa3c>)
 800642c:	f7f9 fe94 	bl	8000158 <__aeabi_dsub>
 8006430:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006434:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006438:	da2e      	bge.n	8006498 <__ieee754_pow+0x9c8>
 800643a:	4652      	mov	r2, sl
 800643c:	f000 f874 	bl	8006528 <scalbn>
 8006440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006444:	f7ff bbed 	b.w	8005c22 <__ieee754_pow+0x152>
 8006448:	4c31      	ldr	r4, [pc, #196]	@ (8006510 <__ieee754_pow+0xa40>)
 800644a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800644e:	42a3      	cmp	r3, r4
 8006450:	d91a      	bls.n	8006488 <__ieee754_pow+0x9b8>
 8006452:	4b30      	ldr	r3, [pc, #192]	@ (8006514 <__ieee754_pow+0xa44>)
 8006454:	440b      	add	r3, r1
 8006456:	4303      	orrs	r3, r0
 8006458:	d009      	beq.n	800646e <__ieee754_pow+0x99e>
 800645a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645e:	2200      	movs	r2, #0
 8006460:	2300      	movs	r3, #0
 8006462:	f7fa faa3 	bl	80009ac <__aeabi_dcmplt>
 8006466:	3800      	subs	r0, #0
 8006468:	bf18      	it	ne
 800646a:	2001      	movne	r0, #1
 800646c:	e444      	b.n	8005cf8 <__ieee754_pow+0x228>
 800646e:	4642      	mov	r2, r8
 8006470:	464b      	mov	r3, r9
 8006472:	f7f9 fe71 	bl	8000158 <__aeabi_dsub>
 8006476:	4632      	mov	r2, r6
 8006478:	463b      	mov	r3, r7
 800647a:	f7fa faab 	bl	80009d4 <__aeabi_dcmpge>
 800647e:	2800      	cmp	r0, #0
 8006480:	d1eb      	bne.n	800645a <__ieee754_pow+0x98a>
 8006482:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8006518 <__ieee754_pow+0xa48>
 8006486:	e6fd      	b.n	8006284 <__ieee754_pow+0x7b4>
 8006488:	469a      	mov	sl, r3
 800648a:	4b24      	ldr	r3, [pc, #144]	@ (800651c <__ieee754_pow+0xa4c>)
 800648c:	459a      	cmp	sl, r3
 800648e:	f63f aef9 	bhi.w	8006284 <__ieee754_pow+0x7b4>
 8006492:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006496:	e71b      	b.n	80062d0 <__ieee754_pow+0x800>
 8006498:	4621      	mov	r1, r4
 800649a:	e7d1      	b.n	8006440 <__ieee754_pow+0x970>
 800649c:	2000      	movs	r0, #0
 800649e:	491b      	ldr	r1, [pc, #108]	@ (800650c <__ieee754_pow+0xa3c>)
 80064a0:	f7ff bb34 	b.w	8005b0c <__ieee754_pow+0x3c>
 80064a4:	2000      	movs	r0, #0
 80064a6:	2100      	movs	r1, #0
 80064a8:	f7ff bb30 	b.w	8005b0c <__ieee754_pow+0x3c>
 80064ac:	4650      	mov	r0, sl
 80064ae:	4659      	mov	r1, fp
 80064b0:	f7ff bb2c 	b.w	8005b0c <__ieee754_pow+0x3c>
 80064b4:	460c      	mov	r4, r1
 80064b6:	f7ff bb79 	b.w	8005bac <__ieee754_pow+0xdc>
 80064ba:	2400      	movs	r4, #0
 80064bc:	f7ff bb64 	b.w	8005b88 <__ieee754_pow+0xb8>
 80064c0:	652b82fe 	.word	0x652b82fe
 80064c4:	3c971547 	.word	0x3c971547
 80064c8:	00000000 	.word	0x00000000
 80064cc:	3fe62e43 	.word	0x3fe62e43
 80064d0:	fefa39ef 	.word	0xfefa39ef
 80064d4:	3fe62e42 	.word	0x3fe62e42
 80064d8:	0ca86c39 	.word	0x0ca86c39
 80064dc:	be205c61 	.word	0xbe205c61
 80064e0:	72bea4d0 	.word	0x72bea4d0
 80064e4:	3e663769 	.word	0x3e663769
 80064e8:	c5d26bf1 	.word	0xc5d26bf1
 80064ec:	3ebbbd41 	.word	0x3ebbbd41
 80064f0:	af25de2c 	.word	0xaf25de2c
 80064f4:	3f11566a 	.word	0x3f11566a
 80064f8:	16bebd93 	.word	0x16bebd93
 80064fc:	3f66c16c 	.word	0x3f66c16c
 8006500:	5555553e 	.word	0x5555553e
 8006504:	3fc55555 	.word	0x3fc55555
 8006508:	fff00000 	.word	0xfff00000
 800650c:	3ff00000 	.word	0x3ff00000
 8006510:	4090cbff 	.word	0x4090cbff
 8006514:	3f6f3400 	.word	0x3f6f3400
 8006518:	4090cc00 	.word	0x4090cc00
 800651c:	3fe00000 	.word	0x3fe00000

08006520 <fabs>:
 8006520:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006524:	4619      	mov	r1, r3
 8006526:	4770      	bx	lr

08006528 <scalbn>:
 8006528:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800652c:	4616      	mov	r6, r2
 800652e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006532:	4683      	mov	fp, r0
 8006534:	468c      	mov	ip, r1
 8006536:	460b      	mov	r3, r1
 8006538:	b982      	cbnz	r2, 800655c <scalbn+0x34>
 800653a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800653e:	4303      	orrs	r3, r0
 8006540:	d039      	beq.n	80065b6 <scalbn+0x8e>
 8006542:	4b2f      	ldr	r3, [pc, #188]	@ (8006600 <scalbn+0xd8>)
 8006544:	2200      	movs	r2, #0
 8006546:	f7f9 ffbf 	bl	80004c8 <__aeabi_dmul>
 800654a:	4b2e      	ldr	r3, [pc, #184]	@ (8006604 <scalbn+0xdc>)
 800654c:	4683      	mov	fp, r0
 800654e:	429e      	cmp	r6, r3
 8006550:	468c      	mov	ip, r1
 8006552:	da0d      	bge.n	8006570 <scalbn+0x48>
 8006554:	a326      	add	r3, pc, #152	@ (adr r3, 80065f0 <scalbn+0xc8>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	e01b      	b.n	8006594 <scalbn+0x6c>
 800655c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006560:	42ba      	cmp	r2, r7
 8006562:	d109      	bne.n	8006578 <scalbn+0x50>
 8006564:	4602      	mov	r2, r0
 8006566:	f7f9 fdf9 	bl	800015c <__adddf3>
 800656a:	4683      	mov	fp, r0
 800656c:	468c      	mov	ip, r1
 800656e:	e022      	b.n	80065b6 <scalbn+0x8e>
 8006570:	460b      	mov	r3, r1
 8006572:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006576:	3a36      	subs	r2, #54	@ 0x36
 8006578:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800657c:	428e      	cmp	r6, r1
 800657e:	dd0c      	ble.n	800659a <scalbn+0x72>
 8006580:	a31d      	add	r3, pc, #116	@ (adr r3, 80065f8 <scalbn+0xd0>)
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	461c      	mov	r4, r3
 8006588:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800658c:	f361 74df 	bfi	r4, r1, #31, #1
 8006590:	4621      	mov	r1, r4
 8006592:	481d      	ldr	r0, [pc, #116]	@ (8006608 <scalbn+0xe0>)
 8006594:	f7f9 ff98 	bl	80004c8 <__aeabi_dmul>
 8006598:	e7e7      	b.n	800656a <scalbn+0x42>
 800659a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800659e:	4432      	add	r2, r6
 80065a0:	428a      	cmp	r2, r1
 80065a2:	dced      	bgt.n	8006580 <scalbn+0x58>
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	dd0a      	ble.n	80065be <scalbn+0x96>
 80065a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80065ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065b4:	46ac      	mov	ip, r5
 80065b6:	4658      	mov	r0, fp
 80065b8:	4661      	mov	r1, ip
 80065ba:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80065be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80065c2:	da09      	bge.n	80065d8 <scalbn+0xb0>
 80065c4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80065c8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80065cc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80065d0:	480e      	ldr	r0, [pc, #56]	@ (800660c <scalbn+0xe4>)
 80065d2:	f041 011f 	orr.w	r1, r1, #31
 80065d6:	e7bd      	b.n	8006554 <scalbn+0x2c>
 80065d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80065dc:	3236      	adds	r2, #54	@ 0x36
 80065de:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065e6:	4658      	mov	r0, fp
 80065e8:	4629      	mov	r1, r5
 80065ea:	2200      	movs	r2, #0
 80065ec:	4b08      	ldr	r3, [pc, #32]	@ (8006610 <scalbn+0xe8>)
 80065ee:	e7d1      	b.n	8006594 <scalbn+0x6c>
 80065f0:	c2f8f359 	.word	0xc2f8f359
 80065f4:	01a56e1f 	.word	0x01a56e1f
 80065f8:	8800759c 	.word	0x8800759c
 80065fc:	7e37e43c 	.word	0x7e37e43c
 8006600:	43500000 	.word	0x43500000
 8006604:	ffff3cb0 	.word	0xffff3cb0
 8006608:	8800759c 	.word	0x8800759c
 800660c:	c2f8f359 	.word	0xc2f8f359
 8006610:	3c900000 	.word	0x3c900000

08006614 <with_errno>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	4604      	mov	r4, r0
 8006618:	460d      	mov	r5, r1
 800661a:	4616      	mov	r6, r2
 800661c:	f7fe fcac 	bl	8004f78 <__errno>
 8006620:	4629      	mov	r1, r5
 8006622:	6006      	str	r6, [r0, #0]
 8006624:	4620      	mov	r0, r4
 8006626:	bd70      	pop	{r4, r5, r6, pc}

08006628 <xflow>:
 8006628:	b513      	push	{r0, r1, r4, lr}
 800662a:	4604      	mov	r4, r0
 800662c:	4619      	mov	r1, r3
 800662e:	4610      	mov	r0, r2
 8006630:	b10c      	cbz	r4, 8006636 <xflow+0xe>
 8006632:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006636:	e9cd 2300 	strd	r2, r3, [sp]
 800663a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800663e:	f7f9 ff43 	bl	80004c8 <__aeabi_dmul>
 8006642:	2222      	movs	r2, #34	@ 0x22
 8006644:	b002      	add	sp, #8
 8006646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800664a:	f7ff bfe3 	b.w	8006614 <with_errno>

0800664e <__math_uflow>:
 800664e:	2200      	movs	r2, #0
 8006650:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006654:	f7ff bfe8 	b.w	8006628 <xflow>

08006658 <__math_oflow>:
 8006658:	2200      	movs	r2, #0
 800665a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800665e:	f7ff bfe3 	b.w	8006628 <xflow>
	...

08006664 <__ieee754_sqrt>:
 8006664:	4a67      	ldr	r2, [pc, #412]	@ (8006804 <__ieee754_sqrt+0x1a0>)
 8006666:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	438a      	bics	r2, r1
 800666c:	4606      	mov	r6, r0
 800666e:	460f      	mov	r7, r1
 8006670:	460b      	mov	r3, r1
 8006672:	4604      	mov	r4, r0
 8006674:	d10e      	bne.n	8006694 <__ieee754_sqrt+0x30>
 8006676:	4602      	mov	r2, r0
 8006678:	f7f9 ff26 	bl	80004c8 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4630      	mov	r0, r6
 8006682:	4639      	mov	r1, r7
 8006684:	f7f9 fd6a 	bl	800015c <__adddf3>
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	4630      	mov	r0, r6
 800668e:	4639      	mov	r1, r7
 8006690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006694:	2900      	cmp	r1, #0
 8006696:	dc0c      	bgt.n	80066b2 <__ieee754_sqrt+0x4e>
 8006698:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800669c:	4302      	orrs	r2, r0
 800669e:	d0f5      	beq.n	800668c <__ieee754_sqrt+0x28>
 80066a0:	b189      	cbz	r1, 80066c6 <__ieee754_sqrt+0x62>
 80066a2:	4602      	mov	r2, r0
 80066a4:	f7f9 fd58 	bl	8000158 <__aeabi_dsub>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	f7fa f836 	bl	800071c <__aeabi_ddiv>
 80066b0:	e7ea      	b.n	8006688 <__ieee754_sqrt+0x24>
 80066b2:	150a      	asrs	r2, r1, #20
 80066b4:	d115      	bne.n	80066e2 <__ieee754_sqrt+0x7e>
 80066b6:	2100      	movs	r1, #0
 80066b8:	e009      	b.n	80066ce <__ieee754_sqrt+0x6a>
 80066ba:	0ae3      	lsrs	r3, r4, #11
 80066bc:	3a15      	subs	r2, #21
 80066be:	0564      	lsls	r4, r4, #21
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0fa      	beq.n	80066ba <__ieee754_sqrt+0x56>
 80066c4:	e7f7      	b.n	80066b6 <__ieee754_sqrt+0x52>
 80066c6:	460a      	mov	r2, r1
 80066c8:	e7fa      	b.n	80066c0 <__ieee754_sqrt+0x5c>
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	3101      	adds	r1, #1
 80066ce:	02d8      	lsls	r0, r3, #11
 80066d0:	d5fb      	bpl.n	80066ca <__ieee754_sqrt+0x66>
 80066d2:	1e48      	subs	r0, r1, #1
 80066d4:	1a12      	subs	r2, r2, r0
 80066d6:	f1c1 0020 	rsb	r0, r1, #32
 80066da:	fa24 f000 	lsr.w	r0, r4, r0
 80066de:	4303      	orrs	r3, r0
 80066e0:	408c      	lsls	r4, r1
 80066e2:	2600      	movs	r6, #0
 80066e4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80066e8:	2116      	movs	r1, #22
 80066ea:	07d2      	lsls	r2, r2, #31
 80066ec:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80066f0:	4632      	mov	r2, r6
 80066f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066fa:	bf5c      	itt	pl
 80066fc:	005b      	lslpl	r3, r3, #1
 80066fe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006702:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006706:	bf58      	it	pl
 8006708:	0064      	lslpl	r4, r4, #1
 800670a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800670e:	107f      	asrs	r7, r7, #1
 8006710:	0064      	lsls	r4, r4, #1
 8006712:	1815      	adds	r5, r2, r0
 8006714:	429d      	cmp	r5, r3
 8006716:	bfde      	ittt	le
 8006718:	182a      	addle	r2, r5, r0
 800671a:	1b5b      	suble	r3, r3, r5
 800671c:	1836      	addle	r6, r6, r0
 800671e:	0fe5      	lsrs	r5, r4, #31
 8006720:	3901      	subs	r1, #1
 8006722:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006726:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800672a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800672e:	d1f0      	bne.n	8006712 <__ieee754_sqrt+0xae>
 8006730:	460d      	mov	r5, r1
 8006732:	f04f 0a20 	mov.w	sl, #32
 8006736:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800673a:	429a      	cmp	r2, r3
 800673c:	eb01 0c00 	add.w	ip, r1, r0
 8006740:	db02      	blt.n	8006748 <__ieee754_sqrt+0xe4>
 8006742:	d113      	bne.n	800676c <__ieee754_sqrt+0x108>
 8006744:	45a4      	cmp	ip, r4
 8006746:	d811      	bhi.n	800676c <__ieee754_sqrt+0x108>
 8006748:	f1bc 0f00 	cmp.w	ip, #0
 800674c:	eb0c 0100 	add.w	r1, ip, r0
 8006750:	da42      	bge.n	80067d8 <__ieee754_sqrt+0x174>
 8006752:	2900      	cmp	r1, #0
 8006754:	db40      	blt.n	80067d8 <__ieee754_sqrt+0x174>
 8006756:	f102 0e01 	add.w	lr, r2, #1
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	4672      	mov	r2, lr
 800675e:	45a4      	cmp	ip, r4
 8006760:	bf88      	it	hi
 8006762:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006766:	eba4 040c 	sub.w	r4, r4, ip
 800676a:	4405      	add	r5, r0
 800676c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006770:	f1ba 0a01 	subs.w	sl, sl, #1
 8006774:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006778:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800677c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006780:	d1db      	bne.n	800673a <__ieee754_sqrt+0xd6>
 8006782:	431c      	orrs	r4, r3
 8006784:	d01a      	beq.n	80067bc <__ieee754_sqrt+0x158>
 8006786:	4c20      	ldr	r4, [pc, #128]	@ (8006808 <__ieee754_sqrt+0x1a4>)
 8006788:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800680c <__ieee754_sqrt+0x1a8>
 800678c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006790:	e9db 2300 	ldrd	r2, r3, [fp]
 8006794:	f7f9 fce0 	bl	8000158 <__aeabi_dsub>
 8006798:	e9d4 8900 	ldrd	r8, r9, [r4]
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4640      	mov	r0, r8
 80067a2:	4649      	mov	r1, r9
 80067a4:	f7fa f90c 	bl	80009c0 <__aeabi_dcmple>
 80067a8:	b140      	cbz	r0, 80067bc <__ieee754_sqrt+0x158>
 80067aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 80067ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80067b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80067b6:	d111      	bne.n	80067dc <__ieee754_sqrt+0x178>
 80067b8:	4655      	mov	r5, sl
 80067ba:	3601      	adds	r6, #1
 80067bc:	1072      	asrs	r2, r6, #1
 80067be:	086b      	lsrs	r3, r5, #1
 80067c0:	07f1      	lsls	r1, r6, #31
 80067c2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80067c6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80067ca:	bf48      	it	mi
 80067cc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80067d0:	4618      	mov	r0, r3
 80067d2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80067d6:	e757      	b.n	8006688 <__ieee754_sqrt+0x24>
 80067d8:	4696      	mov	lr, r2
 80067da:	e7be      	b.n	800675a <__ieee754_sqrt+0xf6>
 80067dc:	f7f9 fcbe 	bl	800015c <__adddf3>
 80067e0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4640      	mov	r0, r8
 80067ea:	4649      	mov	r1, r9
 80067ec:	f7fa f8de 	bl	80009ac <__aeabi_dcmplt>
 80067f0:	b120      	cbz	r0, 80067fc <__ieee754_sqrt+0x198>
 80067f2:	1ca8      	adds	r0, r5, #2
 80067f4:	bf08      	it	eq
 80067f6:	3601      	addeq	r6, #1
 80067f8:	3502      	adds	r5, #2
 80067fa:	e7df      	b.n	80067bc <__ieee754_sqrt+0x158>
 80067fc:	1c6b      	adds	r3, r5, #1
 80067fe:	f023 0501 	bic.w	r5, r3, #1
 8006802:	e7db      	b.n	80067bc <__ieee754_sqrt+0x158>
 8006804:	7ff00000 	.word	0x7ff00000
 8006808:	20000068 	.word	0x20000068
 800680c:	20000060 	.word	0x20000060

08006810 <__ieee754_log>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	460d      	mov	r5, r1
 800681e:	b087      	sub	sp, #28
 8006820:	da24      	bge.n	800686c <__ieee754_log+0x5c>
 8006822:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8006826:	4304      	orrs	r4, r0
 8006828:	d108      	bne.n	800683c <__ieee754_log+0x2c>
 800682a:	2200      	movs	r2, #0
 800682c:	2300      	movs	r3, #0
 800682e:	2000      	movs	r0, #0
 8006830:	49cb      	ldr	r1, [pc, #812]	@ (8006b60 <__ieee754_log+0x350>)
 8006832:	f7f9 ff73 	bl	800071c <__aeabi_ddiv>
 8006836:	b007      	add	sp, #28
 8006838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683c:	2900      	cmp	r1, #0
 800683e:	da04      	bge.n	800684a <__ieee754_log+0x3a>
 8006840:	f7f9 fc8a 	bl	8000158 <__aeabi_dsub>
 8006844:	2200      	movs	r2, #0
 8006846:	2300      	movs	r3, #0
 8006848:	e7f3      	b.n	8006832 <__ieee754_log+0x22>
 800684a:	2200      	movs	r2, #0
 800684c:	4bc5      	ldr	r3, [pc, #788]	@ (8006b64 <__ieee754_log+0x354>)
 800684e:	f7f9 fe3b 	bl	80004c8 <__aeabi_dmul>
 8006852:	460b      	mov	r3, r1
 8006854:	460d      	mov	r5, r1
 8006856:	4602      	mov	r2, r0
 8006858:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800685c:	48c2      	ldr	r0, [pc, #776]	@ (8006b68 <__ieee754_log+0x358>)
 800685e:	4285      	cmp	r5, r0
 8006860:	dd06      	ble.n	8006870 <__ieee754_log+0x60>
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	f7f9 fc79 	bl	800015c <__adddf3>
 800686a:	e7e4      	b.n	8006836 <__ieee754_log+0x26>
 800686c:	2100      	movs	r1, #0
 800686e:	e7f5      	b.n	800685c <__ieee754_log+0x4c>
 8006870:	152c      	asrs	r4, r5, #20
 8006872:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8006876:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800687a:	440c      	add	r4, r1
 800687c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8006880:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8006884:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8006888:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800688c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8006890:	ea41 0305 	orr.w	r3, r1, r5
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	2200      	movs	r2, #0
 800689a:	4bb4      	ldr	r3, [pc, #720]	@ (8006b6c <__ieee754_log+0x35c>)
 800689c:	f7f9 fc5c 	bl	8000158 <__aeabi_dsub>
 80068a0:	1cab      	adds	r3, r5, #2
 80068a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	4682      	mov	sl, r0
 80068aa:	468b      	mov	fp, r1
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 80068b4:	dc53      	bgt.n	800695e <__ieee754_log+0x14e>
 80068b6:	2300      	movs	r3, #0
 80068b8:	f7fa f86e 	bl	8000998 <__aeabi_dcmpeq>
 80068bc:	b1d0      	cbz	r0, 80068f4 <__ieee754_log+0xe4>
 80068be:	2c00      	cmp	r4, #0
 80068c0:	f000 8120 	beq.w	8006b04 <__ieee754_log+0x2f4>
 80068c4:	4620      	mov	r0, r4
 80068c6:	f7f9 fd95 	bl	80003f4 <__aeabi_i2d>
 80068ca:	a391      	add	r3, pc, #580	@ (adr r3, 8006b10 <__ieee754_log+0x300>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	4606      	mov	r6, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	f7f9 fdf8 	bl	80004c8 <__aeabi_dmul>
 80068d8:	a38f      	add	r3, pc, #572	@ (adr r3, 8006b18 <__ieee754_log+0x308>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	4630      	mov	r0, r6
 80068e4:	4639      	mov	r1, r7
 80068e6:	f7f9 fdef 	bl	80004c8 <__aeabi_dmul>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4620      	mov	r0, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	e7b8      	b.n	8006866 <__ieee754_log+0x56>
 80068f4:	a38a      	add	r3, pc, #552	@ (adr r3, 8006b20 <__ieee754_log+0x310>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	4650      	mov	r0, sl
 80068fc:	4659      	mov	r1, fp
 80068fe:	f7f9 fde3 	bl	80004c8 <__aeabi_dmul>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	2000      	movs	r0, #0
 8006908:	4999      	ldr	r1, [pc, #612]	@ (8006b70 <__ieee754_log+0x360>)
 800690a:	f7f9 fc25 	bl	8000158 <__aeabi_dsub>
 800690e:	4652      	mov	r2, sl
 8006910:	4606      	mov	r6, r0
 8006912:	460f      	mov	r7, r1
 8006914:	465b      	mov	r3, fp
 8006916:	4650      	mov	r0, sl
 8006918:	4659      	mov	r1, fp
 800691a:	f7f9 fdd5 	bl	80004c8 <__aeabi_dmul>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4630      	mov	r0, r6
 8006924:	4639      	mov	r1, r7
 8006926:	f7f9 fdcf 	bl	80004c8 <__aeabi_dmul>
 800692a:	4606      	mov	r6, r0
 800692c:	460f      	mov	r7, r1
 800692e:	b914      	cbnz	r4, 8006936 <__ieee754_log+0x126>
 8006930:	4632      	mov	r2, r6
 8006932:	463b      	mov	r3, r7
 8006934:	e0a0      	b.n	8006a78 <__ieee754_log+0x268>
 8006936:	4620      	mov	r0, r4
 8006938:	f7f9 fd5c 	bl	80003f4 <__aeabi_i2d>
 800693c:	a374      	add	r3, pc, #464	@ (adr r3, 8006b10 <__ieee754_log+0x300>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	4680      	mov	r8, r0
 8006944:	4689      	mov	r9, r1
 8006946:	f7f9 fdbf 	bl	80004c8 <__aeabi_dmul>
 800694a:	a373      	add	r3, pc, #460	@ (adr r3, 8006b18 <__ieee754_log+0x308>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	4604      	mov	r4, r0
 8006952:	460d      	mov	r5, r1
 8006954:	4640      	mov	r0, r8
 8006956:	4649      	mov	r1, r9
 8006958:	f7f9 fdb6 	bl	80004c8 <__aeabi_dmul>
 800695c:	e0a5      	b.n	8006aaa <__ieee754_log+0x29a>
 800695e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006962:	f7f9 fbfb 	bl	800015c <__adddf3>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4650      	mov	r0, sl
 800696c:	4659      	mov	r1, fp
 800696e:	f7f9 fed5 	bl	800071c <__aeabi_ddiv>
 8006972:	e9cd 0100 	strd	r0, r1, [sp]
 8006976:	4620      	mov	r0, r4
 8006978:	f7f9 fd3c 	bl	80003f4 <__aeabi_i2d>
 800697c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006984:	4610      	mov	r0, r2
 8006986:	4619      	mov	r1, r3
 8006988:	f7f9 fd9e 	bl	80004c8 <__aeabi_dmul>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006994:	f7f9 fd98 	bl	80004c8 <__aeabi_dmul>
 8006998:	a363      	add	r3, pc, #396	@ (adr r3, 8006b28 <__ieee754_log+0x318>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	4680      	mov	r8, r0
 80069a0:	4689      	mov	r9, r1
 80069a2:	f7f9 fd91 	bl	80004c8 <__aeabi_dmul>
 80069a6:	a362      	add	r3, pc, #392	@ (adr r3, 8006b30 <__ieee754_log+0x320>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fbd6 	bl	800015c <__adddf3>
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	f7f9 fd88 	bl	80004c8 <__aeabi_dmul>
 80069b8:	a35f      	add	r3, pc, #380	@ (adr r3, 8006b38 <__ieee754_log+0x328>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f7f9 fbcd 	bl	800015c <__adddf3>
 80069c2:	4642      	mov	r2, r8
 80069c4:	464b      	mov	r3, r9
 80069c6:	f7f9 fd7f 	bl	80004c8 <__aeabi_dmul>
 80069ca:	a35d      	add	r3, pc, #372	@ (adr r3, 8006b40 <__ieee754_log+0x330>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fbc4 	bl	800015c <__adddf3>
 80069d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d8:	f7f9 fd76 	bl	80004c8 <__aeabi_dmul>
 80069dc:	a35a      	add	r3, pc, #360	@ (adr r3, 8006b48 <__ieee754_log+0x338>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7f9 fd6d 	bl	80004c8 <__aeabi_dmul>
 80069ee:	a358      	add	r3, pc, #352	@ (adr r3, 8006b50 <__ieee754_log+0x340>)
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fbb2 	bl	800015c <__adddf3>
 80069f8:	4642      	mov	r2, r8
 80069fa:	464b      	mov	r3, r9
 80069fc:	f7f9 fd64 	bl	80004c8 <__aeabi_dmul>
 8006a00:	a355      	add	r3, pc, #340	@ (adr r3, 8006b58 <__ieee754_log+0x348>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 fba9 	bl	800015c <__adddf3>
 8006a0a:	4642      	mov	r2, r8
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	f7f9 fd5b 	bl	80004c8 <__aeabi_dmul>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a1a:	f7f9 fb9f 	bl	800015c <__adddf3>
 8006a1e:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8006a22:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8006a26:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8006a2a:	3551      	adds	r5, #81	@ 0x51
 8006a2c:	4335      	orrs	r5, r6
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	4680      	mov	r8, r0
 8006a32:	4689      	mov	r9, r1
 8006a34:	dd48      	ble.n	8006ac8 <__ieee754_log+0x2b8>
 8006a36:	2200      	movs	r2, #0
 8006a38:	4b4d      	ldr	r3, [pc, #308]	@ (8006b70 <__ieee754_log+0x360>)
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	f7f9 fd43 	bl	80004c8 <__aeabi_dmul>
 8006a42:	4652      	mov	r2, sl
 8006a44:	465b      	mov	r3, fp
 8006a46:	f7f9 fd3f 	bl	80004c8 <__aeabi_dmul>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460f      	mov	r7, r1
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fb81 	bl	800015c <__adddf3>
 8006a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a5e:	f7f9 fd33 	bl	80004c8 <__aeabi_dmul>
 8006a62:	4680      	mov	r8, r0
 8006a64:	4689      	mov	r9, r1
 8006a66:	b964      	cbnz	r4, 8006a82 <__ieee754_log+0x272>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 fb72 	bl	8000158 <__aeabi_dsub>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4650      	mov	r0, sl
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	f7f9 fb6c 	bl	8000158 <__aeabi_dsub>
 8006a80:	e6d9      	b.n	8006836 <__ieee754_log+0x26>
 8006a82:	a323      	add	r3, pc, #140	@ (adr r3, 8006b10 <__ieee754_log+0x300>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a8c:	f7f9 fd1c 	bl	80004c8 <__aeabi_dmul>
 8006a90:	a321      	add	r3, pc, #132	@ (adr r3, 8006b18 <__ieee754_log+0x308>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	4604      	mov	r4, r0
 8006a98:	460d      	mov	r5, r1
 8006a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a9e:	f7f9 fd13 	bl	80004c8 <__aeabi_dmul>
 8006aa2:	4642      	mov	r2, r8
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	f7f9 fb59 	bl	800015c <__adddf3>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7f9 fb51 	bl	8000158 <__aeabi_dsub>
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	465b      	mov	r3, fp
 8006aba:	f7f9 fb4d 	bl	8000158 <__aeabi_dsub>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	e7d9      	b.n	8006a7c <__ieee754_log+0x26c>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4650      	mov	r0, sl
 8006ace:	4659      	mov	r1, fp
 8006ad0:	f7f9 fb42 	bl	8000158 <__aeabi_dsub>
 8006ad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ad8:	f7f9 fcf6 	bl	80004c8 <__aeabi_dmul>
 8006adc:	4606      	mov	r6, r0
 8006ade:	460f      	mov	r7, r1
 8006ae0:	2c00      	cmp	r4, #0
 8006ae2:	f43f af25 	beq.w	8006930 <__ieee754_log+0x120>
 8006ae6:	a30a      	add	r3, pc, #40	@ (adr r3, 8006b10 <__ieee754_log+0x300>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af0:	f7f9 fcea 	bl	80004c8 <__aeabi_dmul>
 8006af4:	a308      	add	r3, pc, #32	@ (adr r3, 8006b18 <__ieee754_log+0x308>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	4604      	mov	r4, r0
 8006afc:	460d      	mov	r5, r1
 8006afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b02:	e729      	b.n	8006958 <__ieee754_log+0x148>
 8006b04:	2000      	movs	r0, #0
 8006b06:	2100      	movs	r1, #0
 8006b08:	e695      	b.n	8006836 <__ieee754_log+0x26>
 8006b0a:	bf00      	nop
 8006b0c:	f3af 8000 	nop.w
 8006b10:	fee00000 	.word	0xfee00000
 8006b14:	3fe62e42 	.word	0x3fe62e42
 8006b18:	35793c76 	.word	0x35793c76
 8006b1c:	3dea39ef 	.word	0x3dea39ef
 8006b20:	55555555 	.word	0x55555555
 8006b24:	3fd55555 	.word	0x3fd55555
 8006b28:	df3e5244 	.word	0xdf3e5244
 8006b2c:	3fc2f112 	.word	0x3fc2f112
 8006b30:	96cb03de 	.word	0x96cb03de
 8006b34:	3fc74664 	.word	0x3fc74664
 8006b38:	94229359 	.word	0x94229359
 8006b3c:	3fd24924 	.word	0x3fd24924
 8006b40:	55555593 	.word	0x55555593
 8006b44:	3fe55555 	.word	0x3fe55555
 8006b48:	d078c69f 	.word	0xd078c69f
 8006b4c:	3fc39a09 	.word	0x3fc39a09
 8006b50:	1d8e78af 	.word	0x1d8e78af
 8006b54:	3fcc71c5 	.word	0x3fcc71c5
 8006b58:	9997fa04 	.word	0x9997fa04
 8006b5c:	3fd99999 	.word	0x3fd99999
 8006b60:	c3500000 	.word	0xc3500000
 8006b64:	43500000 	.word	0x43500000
 8006b68:	7fefffff 	.word	0x7fefffff
 8006b6c:	3ff00000 	.word	0x3ff00000
 8006b70:	3fe00000 	.word	0x3fe00000

08006b74 <_init>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	bf00      	nop
 8006b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7a:	bc08      	pop	{r3}
 8006b7c:	469e      	mov	lr, r3
 8006b7e:	4770      	bx	lr

08006b80 <_fini>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	bf00      	nop
 8006b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b86:	bc08      	pop	{r3}
 8006b88:	469e      	mov	lr, r3
 8006b8a:	4770      	bx	lr
